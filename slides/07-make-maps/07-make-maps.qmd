---
title: "Data Visualization - 7. Make Maps"
format: kjhslides-revealjs
engine: knitr
filters:
  - invert-h1
  - line-highlight
  - include-code-files
author:
  - name: Kieran Healy
    affiliation: "Code Horizons"
date: last-modified
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: "note"
#| include: FALSE
## NB: By default the  template will create a new subdirectory with its files inside.
```


```{r}
#| label: "packages"
#| include: FALSE
library(flipbookr)
library(here)
library(tidyverse)
library(kjhslides)
```


```{r}
#| label: "setup"
#| include: FALSE
## Configure the slides

kjh_register_tenso()    # Default fonts. Comment out if you don't have Tenso and Berkeley fonts.
kjh_set_knitr_opts()    
kjh_set_slide_theme()   # ggplot theme to go with slides. Set tenso = FALSE if necessary.


```





# [Making]{.fg-yellow} [Maps]{.fg-lblue}



**Data Visualization: Session 7**

.light[Kieran Healy<br>
Code Horizons, April 2023
]

]

---




---

# Load our libraries

```{r}
#| label: "07-make-maps-1"
#| message: FALSE
library(here)      # manage file paths
library(socviz)    # data and some useful functions
library(tidyverse) # your friend and mine
library(maps)      # Some basic maps
library(sf)        # Simple Features Geometries and geom_sf()
library(ggforce)   # Useful enhancements to ggplot
```

---



# .huge[[Choropleths]{.fg-lblue}]


---
layout: false

![](img/07_election_state_1.png)

.right.w90.small[State-level; vote share; diverging; binned into four categories.]


---
layout: false

![](img/07_election_county.png)

.right.w90.small[County level; winner only]

---
layout: false

![](img/07_election_county_share.png)

.right.w90.small[County level vote share; diverging; binned into six categories]

---
layout: false

![](img/07_election_county_purple.png)

.right.w90.small[County level vote share; diverging continuous; purple midpoint]

---
layout: false

![](img/07_election_county_purple_pop.png)

.right.w90.small[County level vote share; purple midpoint; county area deformed in proportion to population. By Mark Newman]

---
layout: false

![](img/07_election_electoral_college_cartogram.png)

.right.w90.small[Electoral college cartogram]

---




---
layout: false
class: main-title main-title-inv middle

# .middle.squish4.medium[[Problems showing]{.fg-lblue} [Non-Spatial Data]{.fg-orange}<br /> [in choropleth maps]{.fg-lblue}]

---

![](img/07_federal_lands_cred_sm.png)

.right.w90.big[Pretty, Big, and Pretty Empty]

---

![](img/07_federal_lands_admin_sm.png)

.right.w90.big[Pretty, Big, and Pretty Empty]


---




---


# Aside: What the hell's that?

![](img/07_nevada_sm_clip.png)

---

# Zoom and Enhance

![](img/07_federal_checkerboard_sm.png)

.center.large[Suprisingly, not a coding error on my part.]

---

# It's the [Transcontinental Railroad]{.fg-pink}

![](img/07_trans_pacific_route.png)

.center.medium[Making its way through the [Great Basin]{.fg-lblue}, America's largest [endorheic watershed]{.fg-orange}. The checkerboard is a deliberate assignation of property rights along the borders of the railway line.]
---

# Still with us, too

![](img/07_interstate_80_route.png)

.center.medium[Not identical, as Interstate 80 was able to go through some parts the railroad had to go around. OK, now back to scheduled programming.]


---




---

class: right bottom main-title section-title-1

## .huge.right.bottom.squish4[[U.S. State-Level]{.fg-yellow}<br />[Election Data]{.fg-lblue}]

---

# Set up the data

```{r }
#| label: "07-make-maps-2"
## Hex color codes for Democratic Blue and Republican Red
party_colors <- c("#2E74C0", "#CB454A")
```


```{r }
#| label: "07-make-maps-3"
election |> 
  select(state, total_vote, r_points, pct_trump, party, census)
```

---
`r chunq_reveal("reveal-elecfacet1",  lcolw="45", rcolw="55", title = "# Look before Mapping")`

```{r}
#| label: "reveal-elecfacet1"
#| include: FALSE
## Hex color codes for Democratic Blue and Republican Red
party_colors <- c("#2E74C0", "#CB454A")

election |> 
  filter(st %nin% "DC") |> 
  ggplot(mapping = aes(x = r_points,
                       y = reorder(state, r_points),
                       color = party)) + 
  geom_vline(xintercept = 0, 
             color = "gray30") +
  geom_point(size = 2) + 
  scale_color_manual(values = party_colors) + 
  scale_x_continuous(breaks = c(-30, -20, -10, 0, 
                                10, 20, 30, 40),
                     labels = c("30\n (Clinton)", 
                                "20", "10", "0",
                                "10", "20", "30", 
                                "40\n(Trump)")) + 
  facet_wrap(~ census, ncol=2, 
             scales="free_y") +
  guides(color = "none") + 
  labs(x = "Point Margin", y = NULL) +
    theme(axis.text=element_text(size=8))


```

---




---

# With a bit more room

.pull-left.w60[

```{r}
#| label: "07-make-maps-4"
#| echo: FALSE
#| fig.height: 6
#| fig.width: 8
## Hex color codes for Democratic Blue and Republican Red
party_colors <- c("#2E74C0", "#CB454A")

p_out <- election |> 
  filter(st %nin% "DC") |> 
  ggplot(mapping = aes(x = r_points,
                       y = reorder(state, r_points),
                       color = party)) + 
  geom_vline(xintercept = 0, 
             color = "gray30") +
  geom_point(size = 2) + 
  scale_color_manual(values = party_colors) + 
  scale_x_continuous(breaks = c(-30, -20, -10, 0, 
                                10, 20, 30, 40),
                     labels = c("30\n (Clinton)", 
                                "20", "10", "0",
                                "10", "20", "30", 
                                "40\n(Trump)")) + 
  facet_wrap(~ census, ncol=2, 
             scales="free_y") +
  guides(color = "none") + 
  labs(x = "Point Margin", y = NULL) +
    theme(axis.text=element_text(size=8))

p_out
```

]

--

.pull-right.w40[

- See how the panels are unbalanced, even with `scales = "free_y"`?

- This happens because we have unequal number of states per region.

]


---

# We can use [`facet_col()`]{.fg-green} from [`ggforce`]{.fg-lblue}


.pull-left.w45[
```{r}
#| label: "codefig-ggforce"
#| message: FALSE
#| fig.show: "hide"
#| fig.width: 2.5
#| fig.height: 5.65

p_out <- election |> 
  filter(st %nin% "DC") |> 
  ggplot(mapping = aes(x = r_points,
                       y = reorder(state, r_points),
                       color = party)) + 
  geom_vline(xintercept = 0, 
             color = "gray30") +
  geom_point(size = 2) + 
  scale_color_manual(values = party_colors) + 
  scale_x_continuous(breaks = c(-30, -20, -10, 0, 
                                10, 20, 30, 40),
                     labels = c("30\n (Clinton)", 
                                "20", "10", "0",
                                "10", "20", "30", 
                                "40\n(Trump)")) + 
  facet_col(~ census, #<<
            scales="free_y", #<<
            space = "free") + #<<
  guides(color = "none") + 
  labs(x = "Point Margin", y = NULL) +
    theme(axis.text=element_text(size=6), 
          strip.text = element_text(size = rel(0.6)))

p_out

```
]

--

.pull-right.w55[
```{r}
#| label: "07-make-maps-5"
#| echo: FALSE
  knitr::include_graphics(
  knitr::fig_chunk("codefig-ggforce", "png"))
```
]

---



# .huge[[Basic]{.fg-lblue} [Maps]{.fg-yellow}]

---

class: right bottom main-title section-title-1

## .huge.right.bottom.squish4[[Maps as]{.fg-yellow} [polygons]{.fg-lblue}]

---




---

# Take a look at this data

```{r }
#| label: "07-make-maps-6"
## This is from the map library
# library(maps)

us_states <- map_data("state")

dim(us_states)

## Making it a tibble prevents crashes 
## in the slide rendering later on
us_states <- as_tibble(us_states)

us_states

```

---

# What is this, at root?

```{r }
#| label: "07-make-maps-7"
us_states

```

- It's a series of rows defining `x` and `y` coordinatates on a plane. 

- If we join those points up as lines while respecting their `group` (i.e. so `ggplot` knows when to "lift the pen", as with the `gapminder` line plot), we will get an outline map of states in the U.S. 

---

# Like this, with [`geom_polygon()`]{.fg-green}

.pull-left.w35[
```{r}
#| label: "codefig-poly1"
#| message: FALSE
#| fig.show: "hide"
#| fig.width: 6
#| fig.height: 4.5
  
us_states |> 
  ggplot(mapping = aes(x = long, 
                       y = lat, 
                       group = group)) +
  geom_polygon(fill = "white", 
               color = "black") +
  labs(title = "This looks horrible")

```
]

--

.pull-right.w65[
```{r}
#| label: "07-make-maps-8"
#| echo: FALSE
  knitr::include_graphics(
  knitr::fig_chunk("codefig-poly1", "png"))
```
]

---

# We can represent a [`fill`]{.fg-orange}, too, like any geom


.pull-left.w35[
```{r}
#| label: "codefig-poly2"
#| message: FALSE
#| fig.show: "hide"
#| fig.width: 6
#| fig.height: 4.5

us_states |> 
  ggplot(mapping = aes(x = long, 
                       y = lat,
                       fill = region,#<<
                       group = group)) +
  geom_polygon(color = "black") + 
  guides(fill = "none") + #<<
  labs(title = "Still looks horrible", 
       caption = "Set fill = none 
         to stop ggplot from 
         producing a key
         with 50 entries")

```
]

--

.pull-right.w65[
```{r}
#| label: "07-make-maps-9"
#| echo: FALSE
  knitr::include_graphics(
  knitr::fig_chunk("codefig-poly2", "png"))
```
]

---




---

# We need to do two things

### .center.middle.huge[1: Fix the [map projection]{.fg-lblue}]

### .center.middle.huge[2: [Add some data]{.fg-orange} to fill with.]

---

# For now, we'll do it the direct way

- .middle.large[To make explicit what's happening, and to emphasize how [_it's all just points and lines made from tables_]{.fg-pink} we'll first do it at the level of the [`ggplot`]{.fg-lblue} grammar with a geom that just draws shapes, [`geom_polygon()`]{.fg-green}. After that, we'll introduce a new package, [`sf`]{.fg-lblue} and a new geom, [`geom_sf()`]{.fg-green} that will handle this for us, and more.]

---




---

`r chunq_reveal("reveal-coord",  lcolw="40", rcolw="60", title = "# Fix the projection")`

```{r}
#| label: "reveal-coord"
#| include: FALSE
us_states <- as_tibble(map_data("state"))

us_states |> 
  ggplot(mapping = aes(x = long, 
                       y = lat,
                       fill = region,
                       group = group)) +
  geom_polygon(color = "black") + 
  guides(fill = "none") +
  coord_map(projection = "albers", 
            lat0 = 39, 
            lat1 = 45) 

## A coordinate transformation!

```

---




---

# U.S. Map Projections

![](img/07_four_us_projections.png)


---

# U.S. Map Projections

![](img/07_us_albers.png)

---
layout: false

```{r}
#| label: "07-make-maps-10"
#| echo: FALSE
#| fig.height: 8
#| fig.width: 15
us_states |> 
  ggplot(mapping = aes(x = long, 
                       y = lat,
                       fill = region,#<<
                       group = group)) +
  geom_polygon(color = "black") + 
  coord_map(projection = "albers", #<
            lat0 = 39,  #<
            lat1 = 45) + #<
  guides(fill = "none")
```


.right.w90.small[Our U.S. Map again, now transformed]

---




---

# Next, some data

.small[- We can merge our state-level `election` data with the `us_states` table, but we need to do a little work.] 

.pull-left.w45[
```{r }
#| label: "07-make-maps-11"
us_states
```

]

.pull-right.w45[
```{r }
#| label: "07-make-maps-12"
election
```
]

--

.center[To merge, or [_join_]{.fg-pink} these tables, they need to have a column in common to act as a key.]


---

# Recode to make a key

```{r }
#| label: "07-make-maps-13"
election <- election |> 
  mutate(region = tolower(state)) |> 
  relocate(region)

election
```

---

# Now we can join them

.pull-left.w45[
```{r }
#| label: "07-make-maps-14"
us_states
```

]

.pull-right.w45[
```{r }
#| label: "07-make-maps-15"
election
```
]

---

# This is a [_left join_]{.fg-pink}

```{r }
#| label: "07-make-maps-16"
us_states_elec <- left_join(us_states, election, by = "region")

us_states_elec
```

--

.center[Now our `us_states_elec` table has both the line-drawing information and (very redundantly) the election data merged in, with rows repeated as necessary.]


---




---

# Now we can start drawing choropleths


.pull-left.w45[
```{r}
#| label: "codefig-choroparty"
#| message: FALSE
#| fig.show: "hide"
#| fig.width: 4.8
#| fig.height: 4.5

us_states_elec |> 
  ggplot(mapping = aes(x = long, 
                       y = lat,
                       fill = party,#<<
                       group = group)) + 
  geom_polygon(color = "gray90", 
               size = 0.1) +
  coord_map(projection = "albers", 
            lat0 = 39, lat1 = 45) +
  guides(fill = "none")


```
]

.pull-right.w55[
```{r}
#| label: "07-make-maps-17"
#| echo: FALSE
  knitr::include_graphics(
  knitr::fig_chunk("codefig-choroparty", "png"))
```

]

---

# Let's turn off the gridlines

This is a [_theme function_]{.fg-pink}.

```{r }
#| label: "07-make-maps-18"
theme_map <- function(base_size=9, base_family="") {
    require(grid)
    theme_bw(base_size=base_size, base_family=base_family) %+replace%
        theme(axis.line=element_blank(),
              axis.text=element_blank(),
              axis.ticks=element_blank(),
              axis.title=element_blank(),
              panel.background=element_blank(),
              panel.border=element_blank(),
              panel.grid=element_blank(),
              panel.spacing=unit(0, "lines"),
              plot.background=element_blank(),
              legend.justification = c(0,0),
              legend.position = c(0,0)
              )
}
```

---

# Add the theme function at the end

.pull-left.w45[
```{r}
#| label: "codefig-choropartytheme"
#| message: FALSE
#| fig.show: "hide"
#| fig.width: 4.8
#| fig.height: 4.5

us_states_elec |> 
  ggplot(mapping = aes(x = long, 
                       y = lat,
                       fill = party,#<<
                       group = group)) + 
  geom_polygon(color = "gray90", 
               size = 0.1) +
  coord_map(projection = "albers", 
            lat0 = 39, lat1 = 45) +
  theme_map()


```
]

.pull-right.w55[
```{r}
#| label: "07-make-maps-19"
#| echo: FALSE
  knitr::include_graphics(
  knitr::fig_chunk("codefig-choropartytheme", "png"))
```

]

---

# Fix the Party Colors


.pull-left.w45[
```{r}
#| label: "codefig-choropartycolors"
#| message: FALSE
#| fig.show: "hide"
#| fig.width: 4.8
#| fig.height: 4.5
  
## Hex color codes for Democratic Blue and Republican Red
party_colors <- c("#2E74C0", "#CB454A")


us_states_elec |> 
  ggplot(mapping = aes(x = long, 
                       y = lat,
                       fill = party,#<<
                       group = group)) + 
  geom_polygon(color = "gray90", 
               size = 0.1) +
  scale_fill_manual(values = party_colors) + 
  coord_map(projection = "albers", 
            lat0 = 39, lat1 = 45) +
  theme_map()

```
]

--

.pull-right.w55[
```{r}
#| label: "07-make-maps-20"
#| echo: FALSE
  knitr::include_graphics(
  knitr::fig_chunk("codefig-choropartycolors", "png"))
```
]

---

# On maps, continuous measures are _gradients_


.pull-left.w45[
```{r}
#| label: "codefig-gradient1"
#| message: FALSE
#| fig.show: "hide"
#| fig.width: 4.8
#| fig.height: 4.5

us_states_elec |> 
  ggplot(mapping = aes(x = long, 
                       y = lat,
                       fill = pct_trump,#<<
                       group = group)) + 
  geom_polygon(color = "gray90", 
               size = 0.1) +
  coord_map(projection = "albers", 
            lat0 = 39, lat1 = 45) +
  labs(title = "Trump vote", 
       fill = "Percent") +  
  theme_map()

```
]

--

.pull-right.w55[
```{r}
#| label: "07-make-maps-21"
#| echo: FALSE
  knitr::include_graphics(
  knitr::fig_chunk("codefig-gradient1", "png"))
```
]

---

# Fix the gradient scale with its [scale function]{.fg-orange}


.pull-left.w45[
```{r}
#| label: "codefig-gradient2"
#| message: FALSE
#| fig.show: "hide"
#| fig.width: 4.8
#| fig.height: 4.5

us_states_elec |> 
  ggplot(mapping = aes(x = long, 
                       y = lat,
                       fill = pct_trump,
                       group = group)) + 
  geom_polygon(color = "gray90", 
               size = 0.1) +
  scale_fill_gradient(low = "white",  #<<
                      high = "#CB454A") + #<<
        labs(title = "Trump vote") +
  coord_map(projection = "albers", 
            lat0 = 39, lat1 = 45) +
  labs(title = "Trump vote", 
       fill = "Percent") +  
  theme_map()


```
]

--

.pull-right.w55[
```{r}
#| label: "07-make-maps-22"
#| echo: FALSE
  knitr::include_graphics(
  knitr::fig_chunk("codefig-gradient2", "png"))
```


]

---

# Some gradients are [_diverging_]{.fg-yellow}


.pull-left.w45[
```{r}
#| label: "codefig-diverging1"
#| message: FALSE
#| fig.show: "hide"
#| fig.width: 4.8
#| fig.height: 4.5

us_states_elec |> 
  ggplot(mapping = aes(x = long, 
                       y = lat,
                       fill = d_points,#<<
                       group = group)) + 
  geom_polygon(color = "gray90", 
               size = 0.1) +
  scale_fill_gradient2() + #<<
  coord_map(projection = "albers", 
            lat0 = 39, lat1 = 45) +
  labs(title = "Winning Margins", 
       fill = "Percent") +  
  theme_map()


```
]

--

.pull-right.w55[
```{r}
#| label: "07-make-maps-23"
#| echo: FALSE
  knitr::include_graphics(
  knitr::fig_chunk("codefig-diverging1", "png"))
```

]

---

# Purple America Map


.pull-left.w45[
```{r}
#| label: "codefig-purpleamerica"
#| message: FALSE
#| fig.show: "hide"
#| fig.width: 4.8
#| fig.height: 4.5

us_states_elec |> 
  ggplot(mapping = aes(x = long, 
                       y = lat,
                       fill = d_points,#<<
                       group = group)) + 
  geom_polygon(color = "gray90", 
               size = 0.1) +
  scale_fill_gradient2(low = "red",#<<
                mid = scales::muted("purple"),#<<
                high = "blue",#<<
                breaks = c(-25, 0, 25, #<<
                        50, 75)) + #<<
  coord_map(projection = "albers", 
            lat0 = 39, lat1 = 45) +
  labs(title = "Winning Margins", 
       fill = "Percent") +  
  theme_map()



```
]

--

.pull-right.w55[
```{r}
#| label: "07-make-maps-24"
#| echo: FALSE
  knitr::include_graphics(
  knitr::fig_chunk("codefig-purpleamerica", "png"))
```
]

---
layout: false

```{r}
#| label: "07-make-maps-25"
#| echo: FALSE
#| fig.width: 12
#| fig.height: 7
us_states_elec |> 
  ggplot(mapping = aes(x = long, 
                       y = lat,
                       fill = d_points,#<<
                       group = group)) + 
  geom_polygon(color = "gray90", 
               size = 0.1) +
  scale_fill_gradient2(low = "red",#<<
                mid = scales::muted("purple"),#<<
                high = "blue",#<<
                breaks = c(-25, 0, 25, #<<
                        50, 75)) + #<<
  coord_map(projection = "albers", 
            lat0 = 39, lat1 = 45) +
  labs(title = "Winning Margins", 
       fill = "Percent") +  
  theme_map()

```


.right.w90.small[Take a closer look at this, though.]


---
layout: false

![](img/07_dc_section.png)

.right.w90.small[Washington, DC]


---




---


# Purple America Map, without DC


.pull-left.w45[
```{r}
#| label: "codefig-purpleamerica2"
#| message: FALSE
#| fig.show: "hide"
#| fig.width: 4.8
#| fig.height: 4.5

us_states_elec |> 
  filter(region %nin% "district of columbia") |> #<<
  ggplot(mapping = aes(x = long, 
                       y = lat,
                       fill = d_points,
                       group = group)) + 
  geom_polygon(color = "gray90", 
               size = 0.1) +
  scale_fill_gradient2(low = "red",
                mid = scales::muted("purple"),
                high = "blue") +
  coord_map(projection = "albers", 
            lat0 = 39, lat1 = 45) +
  labs(title = "Winning Margins", 
       fill = "Percent") +  
  theme_map()



```
]

--

.pull-right.w55[
```{r}
#| label: "07-make-maps-26"
#| echo: FALSE
  knitr::include_graphics(
  knitr::fig_chunk("codefig-purpleamerica2", "png"))
```
]

---
layout: false

```{r}
#| label: "07-make-maps-27"
#| echo: FALSE
#| fig.width: 12
#| fig.height: 7
us_states_elec |> 
  filter(region %nin% "district of columbia") |> #<<
  ggplot(mapping = aes(x = long, 
                       y = lat,
                       fill = d_points,
                       group = group)) + 
  geom_polygon(color = "gray90", 
               size = 0.1) +
  scale_fill_gradient2(low = "red",
                mid = scales::muted("purple"),
                high = "blue") +
  coord_map(projection = "albers", 
            lat0 = 39, lat1 = 45) +
  labs(title = "Winning Margins", 
       fill = "Percent") +  
  theme_map()

```


.right.w90.small[More balanced.]


---

class: right bottom main-title section-title-1

## .huge.right.bottom.squish4[[America's]{.fg-yellow}<br />[Ur-Choropleths]{.fg-lblue}]

---




---

# County-level choropleths

- Conceptually identical to state ones. The tables are just bigger, because there are way more lines to draw. 

```{r }
#| label: "07-make-maps-28"
county_map <- as_tibble(county_map)
county_map
```

- 191,000 or so rows
- `id` here is the county FIPS code.

---

# County-level choropleths

```{r }
#| label: "07-make-maps-29"
county_data <- as_tibble(county_data)
county_data
```

---

# County-level choropleths

- 3,195 entities, including states (FIPS `id` ends in four zeros) 
- And the US as a whole (FIPS `id` of `0`)

- Sample a few rows, with specific columns:

```{r }
#| label: "07-make-maps-30"
county_data  |> 
    select(id, name, state, pop_dens, pct_black) %>%
    sample_n(10)
```


---




---

# Joined table

```{r }
#| label: "07-make-maps-31"
county_full <- left_join(county_map, county_data, by = "id")

county_full
```


---
`r chunq_reveal("reveal-countypop",  lcolw="40", rcolw="60", title = "# County Population Density")`

```{r}
#| label: "reveal-countypop"
#| include: FALSE
county_full <- left_join(county_map, county_data, by = "id")


county_full |> 
  ggplot(mapping = aes(x = long, y = lat,
                          fill = pop_dens, 
                          group = group)) + 
  geom_polygon(color = "gray70", 
               size = 0.1) + 
  coord_fixed() + 
  scale_fill_brewer(palette="Blues",
                    labels = c("0-10", "10-50", "50-100",
                     "100-500", "500-1,000",
                      "1,000-5,000", ">5,000")) + 
  labs(fill = "Population per\nsquare mile") + 
  kjhslides::kjh_theme_map() + 
  guides(fill = guide_legend(nrow = 1)) + 
  theme(legend.position = "bottom")
```

---
layout: false

```{r}
#| label: "07-make-maps-32"
#| echo: FALSE
#| fig.height: 8
#| fig.width: 12
county_full |> 
  ggplot(mapping = aes(x = long, y = lat,
                          fill = pop_dens, 
                          group = group)) + 
  geom_polygon(color = "gray70", 
               size = 0.1) + 
  coord_fixed() + 
  scale_fill_brewer(palette="Blues",
                    labels = c("0-10", "10-50", "50-100",
                     "100-500", "500-1,000",
                      "1,000-5,000", ">5,000")) + 
  labs(fill = "Population per\nsquare mile") + 
  theme_map() + 
  guides(fill = guide_legend(nrow = 1)) + 
  theme(legend.position = "bottom")
```


.right.w90.small[Population Density by County, binned]

---




---
`r chunq_reveal("reveal-choroblack",  lcolw="40", rcolw="60", title = "# Same again for Percent Black")`

```{r}
#| label: "reveal-choroblack"
#| include: FALSE
county_full <- left_join(county_map, county_data, by = "id")

county_full |> 
  ggplot(mapping = aes(x = long, y = lat,
                       fill = pct_black,  
                       group = group)) + 
  geom_polygon(color = "gray70", 
               size = 0.1) + 
  coord_fixed() + 
  scale_fill_brewer(palette="Greens",
                    labels = c("0-2%", "2-5%", "5-10%",
                               "10-15%", "15-25%",
                               "25-50%", ">50%")) + 
  labs(fill = "US Population, percent Black") + 
  kjhslides::kjh_theme_map() + 
  guides(fill = guide_legend(nrow = 1)) + 
  theme(legend.position = "bottom")
```

---
layout: false

```{r}
#| label: "07-make-maps-33"
#| echo: FALSE
#| fig.height: 8
#| fig.width: 12
county_full |> 
  ggplot(mapping = aes(x = long, y = lat,
                       fill = pct_black, #<< 
                       group = group)) + 
  geom_polygon(color = "gray70", 
               size = 0.1) + 
  coord_fixed() + 
  scale_fill_brewer(palette="Greens",
                    labels = c("0-2%", "2-5%", "5-10%",
                               "10-15%", "15-25%",
                               "25-50%", ">50%")) + 
  labs(fill = "US Population, percent Black") + 
  theme_map() + 
  guides(fill = guide_legend(nrow = 1)) + 
  theme(legend.position = "bottom")
```


.right.w90.small[Percent Black, by County, binned]

---

class: right bottom main-title section-title-1

## .huge.right.bottom.squish4[[Big counties, small populations,]{.fg-yellow} [rare events]{.fg-lblue}]

---




---

# Example: Reverse coding

.pull-left.w45[
```{r }
#| label: "07-make-maps-34"
orange_pal <- RColorBrewer::brewer.pal(n = 6, 
                                       name = "Oranges")
orange_pal
```


```{r}
#| label: "07-make-maps-35"
#| echo: FALSE
#| fig.height: 0.5
#| fig.width: 5
par(mar = c(0, 0, 0, 0))
colorspace::swatchplot("Orange Palette" = orange_pal, nrow = 1)
```
]

--

.pull-right.w45[
```{r }
#| label: "07-make-maps-36"
# Just reverse it
orange_rev <- rev(orange_pal)
orange_rev
```

```{r}
#| label: "07-make-maps-37"
#| echo: FALSE
#| fig.height: 0.5
#| fig.width: 5
par(mar = c(0, 0, 0, 0))
colorspace::swatchplot("Reverse Orange" = orange_rev, nrow = 1)
```
]


---

# Build a plot

```{r }
#| label: "07-make-maps-38"
p_g1 <- county_full |> 
  ggplot(mapping = aes(x = long, y = lat,
                       fill = su_gun6, #<< 
                       group = group)) + 
  geom_polygon(color = "gray70", 
               size = 0.1) + 
  coord_fixed() + 
  scale_fill_manual(values = orange_pal) + #<<
  labs(title = "Gun-Related Suicides, 1999-2015",
       fill = "Rate per 100,000 pop.") + 
  theme_map() + 
  guides(fill = guide_legend(nrow = 1)) + 
  theme(legend.position = "bottom")
```

---
layout: false
class: middle

```{r}
#| label: "07-make-maps-39"
#| echo: FALSE
#| fig.height: 8
#| fig.width: 12
p_g1 
```

.right.w90.small[Regular palette]

---




---

# And another

```{r }
#| label: "07-make-maps-40"
p_g2 <- county_full |> 
  ggplot(mapping = aes(x = long, y = lat,
                       fill = pop_dens6, #<< 
                       group = group)) + 
  geom_polygon(color = "gray70", 
               size = 0.1) + 
  coord_fixed() + 
  scale_fill_manual(values = orange_rev) + #<<
  labs(title = "Reverse-coded Population Density",
       fill = "Persons per square mile") + 
  theme_map() + 
  guides(fill = guide_legend(nrow = 1)) + 
  theme(legend.position = "bottom")
```

---
layout: false
class: middle


```{r}
#| label: "07-make-maps-41"
#| echo: FALSE
#| fig.height: 8
#| fig.width: 12
p_g2
```

.right.w90.small[Reverse-coded density]

---

layout: false
class: middle


.pull-left[
```{r}
#| label: "07-make-maps-42"
#| echo: FALSE
#| fig.height: 6
#| fig.width: 8
p_g1
```


]

.pull-right[
```{r}
#| label: "07-make-maps-43"
#| echo: FALSE
#| fig.height: 6
#| fig.width: 8
p_g2
```


]

.right.w90.small[Comparing the plots]

---

class: right bottom main-title section-title-1

## .huge.right.bottom.squish4[[Small multiples]{.fg-yellow} [for maps]{.fg-lblue}]

---




---

# Opiate-related Mortality, 1999-2014

```{r }
#| label: "07-make-maps-44"
opiates

opiates$state <- tolower(opiates$state)
us_states$state <- us_states$region
opiates_map <- left_join(us_states, opiates, by = "state")
```


---

```{r }
#| label: "07-make-maps-45"
p_out <- opiates_map |> 
  ggplot(mapping = aes(x = long, y = lat,
                       group = group,
                       fill = cut_interval(adjusted, n = 5))) + 
  geom_polygon(color = "lightblue", size = 0.2) +
  coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
  scale_fill_brewer(type = "seq", palette = "Oranges") +
  kjhslides::kjh_theme_map() + 
  facet_wrap(~ year, ncol = 4) +
  guides(fill = guide_legend(nrow = 1)) + 
  theme(legend.position = "bottom",
        strip.background = element_blank()) +
  labs(fill = "Death rate per 100,000 population",
       title = "Opiate-Related Deaths by State, 1999-2014")
```

---
layout: false
class: middle

```{r}
#| label: "07-make-maps-46"
#| echo: FALSE
#| fig.height: 8
#| fig.width: 16
p_out
```


.right.w90.small[Faceting works just as it would for any other kind of plot.]


---

---

class: right bottom main-title section-title-1

## .huge.right.bottom.squish4[[Is your data<br/ >]{.fg-yellow} [really spatial?]{.fg-lblue}]


---




---
`r chunq_reveal("reveal-maxstates",  lcolw="40", rcolw="60", title = "# The two leading states in each region in 2014")`

```{r}
#| label: "reveal-maxstates"
#| include: FALSE
## Put this in an object called `st_top`
opiates |> 
  filter(year == max(year), 
         abbr != "DC") |> 
  group_by(region) |> 
  slice_max(order_by = adjusted, 
            n = 2)

```

---
`r chunq_reveal("reveal-opiateline",  lcolw="40", rcolw="60", title = "# Opiates Time Series plot")`

```{r}
#| label: "reveal-opiateline"
#| include: FALSE
st_top <- opiates |>  filter(year == max(year), abbr != "DC") |> 
  group_by(region) |> 
  slice_max(order_by = adjusted, n = 2)
 
opiates |> 
  ggplot(aes(x = year, 
             y = adjusted)) +
  geom_line(aes(group = state),
            color = "gray50") + 
  geom_smooth(aes(group = region),
              se = FALSE) + 
  ggrepel::geom_text_repel(
    data = st_top,
    mapping = aes(x = year, 
                  y = adjusted, 
                  label = abbr), 
    size = 3, 
    segment.color = NA, 
    nudge_x = 0.5) +
  coord_cartesian(c(min(opiates$year), 
                    max(opiates$year) + 1)) + 
  labs(x = NULL, 
       y = "Rate per 100,000 population",
       title = "State-Level Opiate Death 
          Rates by Region, 1999-2014") +
  facet_wrap(~ reorder(region, adjusted, 
                       na.rm = TRUE), 
             nrow  = 1)
  

```

---
layout: false

```{r}
#| label: "07-make-maps-48"
#| echo: FALSE
#| fig.height: 6
#| fig.width: 15
p_out <- opiates |> 
  ggplot(aes(x = year, 
             y = adjusted)) +
  geom_line(aes(group = state),
            color = "gray50") + 
  geom_smooth(aes(group = region),
              se = FALSE) + 
  ggrepel::geom_text_repel(
    data = st_top,
    mapping = aes(x = year, 
                  y = adjusted, 
                  label = abbr), 
    size = 3, 
    segment.color = NA, 
    nudge_x = 0.5) +
  coord_cartesian(c(min(opiates$year), 
                    max(opiates$year) + 1)) + 
  labs(x = NULL, 
       y = "Rate per 100,000 population",
       title = "State-Level Opiate Death 
          Rates by Region, 1999-2014") +
  facet_wrap(~ reorder(region, adjusted, 
                       na.rm = TRUE), 
             nrow  = 1)
  
p_out
```


.right.w90.small[Regional trends in opiate-related mortality.]






---



# .huge[[Simple Features]{.fg-lblue}]

---




---



# [`geom_polygon()`]{.fg-green} is limiting

- It's very useful to have the intuition that, when drawing maps, [we're just working with tables]{.fg-orange} of `x` and `y` coordinates, and [shapes represent quantities in our data]{.fg-orange}, in a way that's essentially the same as any other geom. This makes it worth getting comfortable with what  [`geom_polygon()`]{.fg-green} and [`coord_map()`]{.fg-green} are doing. But the business of having very large map tables and manually specifying projections is inefficient. 

--

- In addition, sometimes our data _really is_ properly spatial, at which point we need a more rigorous and consistent way of specifying those elements. There's a whole world of Geodesic standards and methods devoted to specifying these things for GIS applications. R is not a dedicated GIS, but we can take advantage of these tools.

--

- .center.large[Enter [simple features]{.fg-pink}, the [`sf`]{.fg-lblue} package, and [`geom_sf()`]{.fg-green}]

---

# The Simple Features package

```{r}
#| label: "07-make-maps-49"
#| echo: FALSE
detach(package:sf)
```

- When we load [`sf`]{.fg-lblue} it creates a way to use several standard GIS concepts and tools, such as the [GEOS]{.fg-lblue} library for computational geometry, the [PROJ]{.fg-lblue} software that transforms spatial coordinates from one reference system to another, as in map projections, and the Simple Features standard for specifying the elements of spatial attributes. 

```{r}
#| label: "07-make-maps-50"
#| message: TRUE
library(sf)
```

--

Let's see the main upshot for us as end-users. 

---

# The [`nycdogs`]{.fg-lblue} package

.pull-left.w60[
```{r }
#| label: "07-make-maps-51"
library(nycdogs)
nyc_license
```
]

.pull-right.w40[
![](img/07_nycdogs_hex.png)
]

---

# The [`nycdogs`]{.fg-lblue} package

- The metadata tells you this is not a regular tibble.

```{r }
#| label: "07-make-maps-52"
nyc_zips
```

---

# The [`nycdogs`]{.fg-lblue} package

```{r }
#| label: "07-make-maps-53"
nyc_zips |> 
  select(objectid:borough)
```

- The [`polygon`]{.fg-orange} column is a list of lat/lon points that, when joined, draw the outline of the zip code area. This is _much_ more compact than a big table where every row is a single point.

---

# Let's make a summary table

---
`r chunq_reveal("reveal-nycfrench",  lcolw="40", rcolw="60", title = "# Let's make a summary table")`

```{r}
#| label: "reveal-nycfrench"
#| include: FALSE
nyc_license  |> 
  filter(extract_year == 2018) |> 
  group_by(breed_rc, zip_code) |> 
  tally() |> 
  mutate(freq = n / sum(n)) |> 
  filter(breed_rc == "French Bulldog") ->
  nyc_fb

```

```{r}
#| echo: FALSE
nyc_fb <- nyc_license  |> 
  filter(extract_year == 2018) |> 
  group_by(breed_rc, zip_code) |> 
  tally() |> 
  mutate(freq = n / sum(n)) |> 
  filter(breed_rc == "French Bulldog") ->
  nyc_fb
```


---

# Now we have two tables again

.pull-left.w70[
```{r }
#| label: "07-make-maps-54"
nyc_zips |> select(objectid:st_fips)
```

]

--

.pull-right.w30[
```{r }
#| label: "07-make-maps-55"
nyc_fb |> select(breed_rc:n)
```

]

--

- Join them:

```{r }
#| label: "07-make-maps-56"
fb_map <- left_join(nyc_zips, nyc_fb, by = "zip_code")
```


---

# Ready to map

```{r }
#| label: "07-make-maps-57"
fb_map |> select(zip_code, po_name, borough, breed_rc:freq, geometry)
```

---

# A NYC map theme

- Just moving the legend, really.

```{r }
#| label: "07-make-maps-58"
theme_nymap <- function(base_size=9, base_family="") {
    require(grid)
    theme_bw(base_size=base_size, base_family=base_family) %+replace%
        theme(axis.line=element_blank(),
              axis.text=element_blank(),
              axis.ticks=element_blank(),
              axis.title=element_blank(),
              panel.background=element_blank(),
              panel.border=element_blank(),
              panel.grid=element_blank(),
              panel.spacing=unit(0, "lines"),
              plot.background=element_blank(),
              legend.justification = c(0,0),
              legend.position = c(0.05, 0.58), 
              legend.direction = "horizontal"
        )
}

```

---
`r chunq_reveal("reveal-bulldogmap",  lcolw="40", rcolw="60", title = "# First cut at a map")`

```{r}
#| label: "reveal-bulldogmap"
#| include: FALSE
fb_map %>% 
    ggplot(mapping = aes(fill = freq)) +
    geom_sf(color = "gray30", size = 0.1) + #<<
    scale_fill_viridis_c(option = "A") +
    labs(fill = "Percent of All French Bulldogs") +
    annotate(geom = "text", 
             x = -74.145 + 0.029, 
             y = 40.82-0.012, 
           label = "New York City's French Bulldogs", 
           size = 6) + 
    annotate(geom = "text", 
             x = -74.1468 + 0.029, 
             y = 40.8075-0.012, 
           label = "By Zip Code. Based on Licensing Data", 
           size = 5) + 
    kjhslides::kjh_theme_nymap() + 
   guides(fill = 
           guide_legend(title.position = "top", 
                label.position = "bottom",
                keywidth = 1, 
                nrow = 1))  
 
```
---

`r chunq_reveal("reveal-bulldogmap2",  lcolw="40", rcolw="60", title = "# Use a different palette")`

```{r}
#| label: "reveal-bulldogmap2"
#| include: FALSE
library(colorspace)
fb_map <- left_join(nyc_zips, nyc_fb, by = "zip_code")

fb_map |> 
  ggplot(mapping = aes(fill = freq)) +
  geom_sf(color = "gray30", size = 0.1) +
  scale_fill_continuous_sequential(
    palette = "Oranges",
    labels = scales::label_percent()) +
  labs(fill = "Percent of all French Bulldogs") +
  annotate(geom = "text", 
           x = -74.145 + 0.029, 
           y = 40.82-0.012, 
           label = "New York City's French Bulldogs", 
           size = 6) + 
  annotate(geom = "text", 
           x = -74.1468 + 0.029, 
           y = 40.7955, 
           label = "By Zip Code. Based on Licensing Data", 
           size = 5) + 
  kjhslides::kjh_theme_nymap() + 
  guides(fill = 
           guide_legend(title.position = "top", 
                label.position = "bottom",
                keywidth = 1, 
                nrow = 1))  

```

---
layout: false

```{r}
#| label: "07-make-maps-59"
#| echo: FALSE
#| fig.width: 12
#| fig.height: 8
fb_map |> 
  ggplot(mapping = aes(fill = freq)) +
  geom_sf(color = "gray30", size = 0.1) +
  scale_fill_continuous_sequential(
    palette = "Oranges",
    labels = scales::label_percent()) +
  labs(fill = "Percent of All French Bulldogs") +
  annotate(geom = "text", 
           x = -74.145 + 0.029, 
           y = 40.82-0.012, 
           label = "New York City's French Bulldogs", 
           size = 6) + 
  annotate(geom = "text", 
           x = -74.1468 + 0.029, 
           y = 40.7955, 
           label = "By Zip Code. Based on Licensing Data", 
           size = 5) + 
  kjhslides::kjh_theme_nymap() + 
  guides(fill = 
           guide_legend(title.position = "top", 
                label.position = "bottom",
                keywidth = 1, 
                nrow = 1))  

```


.right.w90.small[NYC Dogs Map mark 2]

---




---
`r chunq_reveal("reveal-bulldogzeros",  lcolw="40", rcolw="60", title = "# Keep the Zero count zips")`

```{r}
#| label: "reveal-bulldogzeros"
#| include: FALSE

nyc_license  |> 
  filter(extract_year == 2018) |> 
  group_by(breed_rc, zip_code) |> 
  tally() |> 
  ungroup() |> 
  complete(zip_code, breed_rc, 
             fill = list(n = 0)) |> 
  # Regroup to get the right denominator
  group_by(breed_rc) |> 
  mutate(freq = n / sum(n)) |> 
  filter(breed_rc == "French Bulldog") ->
  nyc_fb2

fb_map2 <- left_join(nyc_zips, 
                     nyc_fb2, 
                     by = "zip_code")

```


---

# Ready to map, again

```{r }
#| label: "07-make-maps-60"
fb_map2 |> select(zip_code, po_name, borough, breed_rc:freq, geometry)
```

- This time, a number of previous [NA]{.fg-red} rows are now zeroes instead.

---


---
`r chunq_reveal("reveal-bulldogfb2",  lcolw="40", rcolw="60", title = "# Now redraw the map")`

```{r}
#| label: "reveal-bulldogfb2"
#| include: FALSE
fb_map2 <- left_join(nyc_zips, nyc_fb2, by = "zip_code")

fb_map2 |> 
  ggplot(mapping = aes(fill = freq)) +
  geom_sf(color = "gray30", size = 0.1) +
  scale_fill_continuous_sequential(
    palette = "Oranges", 
    labels = scales::label_percent()) +
  labs(fill = "Percent of all French Bulldogs") +
  annotate(geom = "text", 
           x = -74.145 + 0.029, 
           y = 40.82-0.012, 
           label = "New York City's French Bulldogs", 
           size = 6) + 
  annotate(geom = "text", 
           x = -74.1468 + 0.029, 
           y = 40.7955, 
           label = "By Zip Code. Based on Licensing Data", 
           size = 5) + 
  kjhslides::kjh_theme_nymap() + 
  guides(fill = 
           guide_legend(title.position = "top", 
                        label.position = "bottom",
                        keywidth = 1, 
                        nrow = 1))  

```

---
layout: false

```{r}
#| label: "07-make-maps-61"
#| echo: FALSE
#| fig.width: 12
#| fig.height: 8
fb_map2 |> 
  ggplot(mapping = aes(fill = freq)) +
  geom_sf(color = "gray30", size = 0.1) +
  scale_fill_continuous_sequential(
    palette = "Oranges", 
    labels = scales::label_percent()) +
  labs(fill = "Percent of all French Bulldogs") +
  annotate(geom = "text", 
           x = -74.145 + 0.029, 
           y = 40.808, 
           label = "New York City's French Bulldogs", 
           size = 6) + 
  annotate(geom = "text", 
           x = -74.145 + 0.028, 
           y = 40.795, 
           label = "By Zip Code. Based on Licensing Data", 
           size = 5) + 
  kjhslides::kjh_theme_nymap() + 
  guides(fill = 
           guide_legend(title.position = "top", 
                        label.position = "bottom",
                        keywidth = 1, 
                        nrow = 1))  

```


.right.w90.small[Zero areas properly zero, missing areas properly missing.]




