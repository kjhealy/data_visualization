---
title: "Data Visualization - 3. Make Some Graphs"
author: "Kieran Healy"
date: "`r Sys.Date()`"
output: kjhslides::kjh_slides_reader
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: "note"
#| include: FALSE
## NB: By default the  template will create a new subdirectory with its files inside.
```


```{r}
#| label: "packages"
#| include: FALSE
library(flipbookr)
library(kjhslides)
library(here)
```


```{r}
#| label: "setup"
#| include: FALSE
## Configure the slides

kjh_register_tenso()    # Default fonts. Comment out if you don't have Tenso and Berkeley fonts.
kjh_set_knitr_opts()    
# kjh_set_slide_theme()   # ggplot theme to go with slides. Set tenso = FALSE if necessary.
kjh_set_classic_theme()






# Safe
```




# Make Some [Graphs]{.fg-yellow} 



**Data Visualization: Session 3**

.light[Kieran Healy<br>
Code Horizons, April 2023
]

]


---




---

# Load our libraries


```{r}
#| label: "05-work-with-dplyr-and-geoms-1"
#| message: TRUE
library(here)      # manage file paths
library(socviz)    # data and some useful functions
library(tidyverse) # your friend and mine
library(gapminder) # some data
```
]

---




---

# Nearly done with the scaffolding


- âœ… Thought about elements of visualization

--

- âœ… Gotten oriented to R and RStudio

--

- âœ… Knitted a document 

--

- âœ… Written a bit of `ggplot` code

--


- â¬œ Get my data in to R

--

- â¬œ Make a plot with it

---
layout: false
class: bottom
background-image: url("img/03_feed_me_seymour.png")
background-size: cover

## .huge.right.bottom.squish4.kjh-grey[Feed ggplot [tidy]{.fg-pink} data]

---




---

# What is [tidy data]{.fg-orange}?

![](img/03_ggplot_tidy_data_only.png)

---

# What is [tidy data]{.fg-orange}?

![](img/03_ggplot_tidy_data_only.png)

.center[Essentially: data in _long_ format.]



---

# Every column is a single variable

![](img/03_tidy_columns.png)


---

# Every row is a single observation

![](img/03_tidy_rows.png)


---

# Every cell is a single value

![](img/03_tidy_values.png)


---

# Get your data into long format

Very, _very_ often, the solution to some data-wrangling or data visualization problem in a Tidyverse-focused workflow is:

--

## .large[[First]{.fg-pink}, [get the data into long format]{.fg-lblue}.]

## Then do the thing you want.

---

# Untidy data is common for good reasons!

Storing and printing data in long format entails a lot of _repetition_ and _redundancy_:

.small[
```{r }
#| label: "03-make-a-graph-1"
library(palmerpenguins)
penguins |> 
  group_by(species, island, year) |> 
  summarize(bill = round(mean(bill_length_mm, na.rm = TRUE),2)) |> 
  knitr::kable()
```
]

---

# Untidy data is common for good reasons

A wide format is _easier_ and _more efficient_ to read in print:


.small[
```{r }
#| label: "03-make-a-graph-2"
penguins |> 
  group_by(species, island, year) |> 
  summarize(bill = round(mean(bill_length_mm, na.rm = TRUE), 2)) |> 
  pivot_wider(names_from = year, values_from = bill) |> 
  knitr::kable()
```
]

::: aside
 (Again, these tables are made directly in R with the code you see here.)
:::


---

# It's also common for [_less_]{.fg-orange} good reasons

![](img/03_election_spreadsheet.png)

---

# It's also common for [_less_]{.fg-orange} good reasons

.pull-left.w70[![:scale 100%](img/03_election_spreadsheet.png)]

.pull-right.w30[

- ðŸ˜  More than one header row

- ðŸ˜¡ Mixed data types in some columns

- ðŸ’€ Color and typography used to encode variables and their values 

]
---


# Fix it [before]{.fg-yellow} you import it

Prevention is better than cure!

An excellent article by Karl Broman and Kara Woo: 

- .smaller.squish3[Broman KW, Woo KH (2018) "[Data organization in spreadsheets](doi:10.1080/00031305.2017.1375989)." _The American Statistician_ 78:2â€“10]

![](img/03_broman_and_woo.png)

---

# The most common [`tidyr`]{.fg-lblue} operation

_Pivoting_ from wide to long:


```{r }
#| label: "03-make-a-graph-3"
edu
```

Here, a "Level of Schooling Attained" variable is spread across the columns, from `elem4` to `coll4`.


This is fine for a compact table, but we need a _key_ column called "education" with the various levels of schooling, and a corresponding _value_ column containing the counts.
]
---

# From wide to long with [`pivot_longer()`]{.fg-green}

.SMALL.squish2[We're going to put the columns `elem4:coll4` into a new column, creating a new categorical measure named [`education`]{.fg-orange}. The numbers currently under each column will become a  new [`value`]{.fg-orange} column corresponding to that level of education. ]

```{r }
#| label: "03-make-a-graph-4"
edu |> 
  pivot_longer(elem4:coll4, names_to = "education")
```

---

# From wide to long with [`pivot_longer()`]{.fg-green}

.SMALL.squish2[We can name the value column to whatever we like. Here it's a number of people.]

```{r }
#| label: "03-make-a-graph-5"
edu |> 
  pivot_longer(elem4:coll4, 
               names_to = "education", 
               values_to = "n")
```


---



# .huge[How to get your own data into R]{.fg-lblue}

---

# Reading in CSV files

Base R has [`read.csv()`]{.fg-green}

--

Corresponding tidyverse "underscored" version: [`read_csv()`]{.fg-green}.

It is pickier and more talkative than the Base R version. Use it instead.

---

# Where's my data? Using [`here()`]{.fg-green}

If we're loading a file, it's coming from _somewhere_.

If it's a file on our hard drive somewhere, we will need to interact with the file system. We should try to do this in a way that avoids _absolute_ file paths. 

```r
# This is not portable!
df <- read_csv("/Users/kjhealy/Documents/data/misc/project/data/mydata.csv")
```

--
  
We should also do it in a way that is _platform independent_. 

This makes it easier to share your work, move it around, etc. Projects should be self-contained.

---

# Where's my data? Using [`here()`]{.fg-green}

The `here` package, and [**`here()`**]{.fg-green} function builds paths relative to the top level of your R project. 

```{r }
#| label: "03-make-a-graph-6"
here() # this path will be different for you
```

---

# Where's the data? Using [`here()`]{.fg-green}

This seminar's files all live in an RStudio project. It looks like this:

```{r}
#| label: "03-make-a-graph-7"
#| echo: FALSE
fs::dir_tree(here(), recurse = 0)
```

I want to load files from the `data` folder, but I also want _you_ to be able to load them. I'm writing this from somewhere deep in the `slides` folder, but you won't be there. Also, I'm on a Mac, but you may not be.

---

# Where's the data? Using [`here()`]{.fg-green}

 So:

```{r }
#| label: "03-make-a-graph-8"
## Load the file relative to the path from the top of the project, without separators, etc
organs <- read_csv(file = here("data", "organdonation.csv"))
```

--


```{r }
#| label: "03-make-a-graph-9"
organs
```

]

.small[And there it is.]

---

# [`read_csv()`]{.fg-green} comes in different varieties


## [**`read_csv()`**]{.fg-green} Field separator is a comma: [**`,`**]{.fg-red}

```{r }
#| label: "03-make-a-graph-10"
organs <- read_csv(file = here("data", "organdonation.csv"))
```

## [**`read_csv2()`**]{.fg-green} Field separator is a semicolon: [**`;`**]{.fg-red}

```r
# Example only
my_data <- read_csv2(file = here("data", "my_euro_file.csv))
```

Both are special cases of [**`read_delim()`**]{.fg-green}

---

# Other species are also catered to

- [**`read_tsv()`**]{.fg-green} Tab separated.

- [**`read_fwf()`**]{.fg-green} Fixed-width files.

- [**`read_log()`**]{.fg-green} Log files (i.e. computer log files).

- [**`read_lines()`**]{.fg-green} Just read in lines, without trying to parse them.

---

# Also often useful ...

- [**`read_table()`**]{.fg-green}  

For data that's separated by one (or more) columns of space.


---

# And for foreign file formats ... 

## The tidyverse's [`haven`]{.fg-lblue} package provides

- [**`read_dta()`**]{.fg-green}  Stata

- [**`read_spss()`**]{.fg-green}  SPSS

- [**`read_sas()`**]{.fg-green}  SAS

- [**`read_xpt()`**]{.fg-green}  SAS Transport


## Make these functions available with [`library`]{.fg-green}`(haven)`

---

# You can read files remotely, too

.SMALL.squish3[
You can give these functions local files, or they can also be pointed at URLs.

Compressed files (`.zip`, `.tar.gz`) will be automatically uncompressed.

(Be careful what you download from remote locations!)]


```{r }
#| label: "03-make-a-graph-11"
organ_remote <- read_csv("http://kjhealy.co/organdonation.csv")

organ_remote
```
]

---



# .huge[A Plot's .kjh-yellow[Components]{.fg-lblue}]

---




---

# What we need our code to make

.pull-left[

![](img/03_ggplot_flow_final_plot_only.png)

]

--


- .medium[Data [**represented**]{.fg-pink} by visual elements;]

--

- .medium[like [_position_]{.fg-orange}, [_length_]{.fg-orange}, [_color_]{.fg-orange}, and [_size_]{.fg-orange};]

--

- .medium[Each measured on some [**scale**]{.fg-pink};]

--

- .medium[Each scale with a labeled [**guide**]{.fg-pink};]

--

- .medium[With the plot itself also [**titled**]{.fg-pink} and labeled.]

---




---



# .huge[[How `ggplot`]{.fg-yellow}<br />[does this]{.fg-lblue}]

---

# [`ggplot`]{.fg-lblue}'s flow of action

## .kjh-large.center[Here's the whole thing from start to finish]

![](img/03_ggplot_flow_wide_all.png)

## .kjh-large.center[We'll go through it step by step]

---

# [`ggplot`]{.fg-lblue}'s flow of action

![](img/03_ggplot_flow_tidy_data_only.png)


---

# [`ggplot`]{.fg-lblue}'s flow of action

![](img/03_ggplot_flow_final_plot_only.png)

---


# [`ggplot`]{.fg-lblue}'s flow of action

![](img/03_ggplot_flow_wide_1to3.png)

---

# [`ggplot`]{.fg-lblue}'s flow of action

![](img/03_ggplot_flow_wide_4to6.png)


---

# [`ggplot`]{.fg-lblue}'s flow of action: [required]{.fg-red}

![](img/03_ggplot_flow_wide_1.png)


---

# [`ggplot`]{.fg-lblue}'s flow of action: [required]{.fg-red}

![](img/03_ggplot_flow_wide_2.png)


---

# [`ggplot`]{.fg-lblue}'s flow of action: [required]{.fg-red}

![](img/03_ggplot_flow_wide_3.png)

---

class: right bottom main-title section-title-1

## .huge.right.bottom.squish4[Let's go piece by piece]{.fg-yellow}


---

# Start with the data

```{r }
#| label: "03-make-a-graph-12"
gapminder
```

```{r }
#| label: "03-make-a-graph-13"
dim(gapminder)
```

---

# Create a plot object

## Data is the [`gapminder`]{.fg-orange} tibble.


```{r }
#| label: "03-make-a-graph-14"
p <- ggplot(data = gapminder)
```

## Map variables to aesthetics

## Tell [`ggplot`]{.fg-lblue} the variables you want represented by visual elements on the plot

```{r }
#| label: "03-make-a-graph-15"
p <- ggplot(data = gapminder,
            mapping = aes(x = gdpPercap,
                          y = lifeExp))
```

---

# Map variables to aesthetics

## The [`mapping`]{.fg-orange} `=` [`aes(...)`]{.fg-green} call links variables to things you will see on the plot.

## `x` and `y` represent the quantities determining position on the x and y axes.

## Other aesthetic mappings can include, e.g., `color`, `shape`, `size`, and `fill`. 

---
layout: false
class: main-title main-title-inv

## .middle.large.squish4[[Mappings]{.fg-orange} do not _directly_ specify the particular, e.g., colors, shapes, or line styles that will appear on the plot. Rather, they establish [_which variables_]{.fg-orange} in the data will be represented by [_which visible elements_]{.fg-orange} on the plot.]

---




---

# [`p`]{.fg-orange} has data and mappings but no geom

```{r}
#| label: "03-make-a-graph-16"
#| fig.cap: "This empty plot has no geoms."
#| fig.width: 8
#| fig.height: 5
p
```

---

# Add a geom

```{r}
#| label: "03-make-a-graph-17"
#| fig.cap: "A scatterplot of Life Expectancy vs GDP"
#| fig.width: 8
#| fig.height: 5
p + geom_point() 
```

---

# Try a different geom

```{r}
#| label: "03-make-a-graph-18"
#| fig.cap: "A scatterplot of Life Expectancy vs GDP"
#| fig.width: 8
#| fig.height: 5
p + geom_smooth() 
```

---

# Build your plots layer by layer

```{r}
#| label: "03-make-a-graph-19"
#| fig.cap: "Life Expectancy vs GDP, using a smoother."
#| fig.width: 8
#| fig.height: 5

p <- ggplot(data = gapminder,
            mapping = aes(x = gdpPercap,
                          y=lifeExp))
p + geom_smooth()

```


---

# This process is additive

```{r}
#| label: "03-make-a-graph-20"
#| fig.cap: "Life Expectancy vs GDP, using a smoother."
#| fig.width: 8
#| fig.height: 5

p <- ggplot(data = gapminder,
            mapping = aes(x = gdpPercap,
                          y=lifeExp))
p + geom_point() + geom_smooth()

```

---
`r chunq_reveal("reveal-additive1",  lcolw="35", rcolw="65", title = "# This process is additive")`

```{r}
#| label: "reveal-additive1"
#| include: FALSE
p <- ggplot(data = gapminder,
            mapping = aes(x = gdpPercap,
                          y=lifeExp))
p + geom_smooth() + 
  geom_point() 
```
---

# Every [`geom`]{.fg-green} is a [function]{.fg-green} 

## Functions take [arguments]{.fg-orange}

.pull-left.w45[
```{r}
#| label: "codefig-functionargs"
#| message: FALSE
#| fig.show: "hide"
#| fig.cap: "An ill-advised linear fit"
#| fig.width: 4.8
#| fig.height: 4.5
p <- ggplot(data = gapminder,
            mapping = aes(x = gdpPercap,
                          y = lifeExp))
p + geom_point() + 
  geom_smooth(method = "lm") 
```
]

--

.pull-right.w55[
```{r}
#| label: "03-make-a-graph-21"
#| echo: FALSE
  knitr::include_graphics(
  knitr::fig_chunk("codefig-functionargs", "png"))
```
]

---
`r chunq_reveal("reveal-logtrans",  lcolw="40", rcolw="60", title = "# Keep Layering")`

```{r}
#| label: "reveal-logtrans"
#| include: FALSE
 p <- ggplot(data = gapminder, 
             mapping = aes(x = gdpPercap, 
                           y=lifeExp))
p + geom_point() +
    geom_smooth(method = "lm") +
    scale_x_log10()
```
---

`r chunq_reveal("reveal-logtrans2",  lcolw="50", rcolw="50", title = "# Fix the labels")`

```{r}
#| label: "reveal-logtrans2"
#| include: FALSE
p <- ggplot(data = gapminder, 
            mapping = aes(x = gdpPercap, 
                          y=lifeExp))
p + geom_point() +
    geom_smooth(method = "lm") +
    scale_x_log10(labels = scales::label_dollar())
```

---

# Add labels, title, and caption

.pull-left.w45[
```{r}
#| label: "codefig-logtranslab"
#| message: FALSE
#| fig.show: "hide"
#| fig.width: 5
#| fig.height: 4.5
p <- ggplot(data = gapminder, 
            mapping = aes(x = gdpPercap, 
                          y = lifeExp))
p + geom_point() + 
  geom_smooth(method = "lm") +
    scale_x_log10(labels = scales::label_dollar()) +
    labs(x = "GDP Per Capita", 
         y = "Life Expectancy in Years",
         title = "Economic Growth and Life Expectancy",
         subtitle = "Data points are country-years",
         caption = "Source: Gapminder.")
```
]

--

.pull-right.w55[
```{r}
#| label: "03-make-a-graph-22"
#| echo: FALSE
  knitr::include_graphics(
  knitr::fig_chunk("codefig-logtranslab", "png"))
```
]

---

class: right bottom main-title section-title-1

## .huge.right.bottom.squish4[[Mapping]{.fg-yellow} vs [Setting]{.fg-lblue}<br />your plot's aesthetics]

---

# "Can I change the color of the points?"


```{r }
#| label: "03-make-a-graph-23"
p <- ggplot(data = gapminder,
            mapping = aes(x = gdpPercap,
                          y = lifeExp,
                          color = "purple"))

## Put in an object for convenience
p_out <- p + geom_point() +
    geom_smooth(method = "loess") +
    scale_x_log10()
```

---

# What has gone wrong here?

```{r}
#| label: "03-make-a-graph-24"
#| fig.width: 8
#| fig.height: 5
p_out
```


---

# Try again

```{r }
#| label: "03-make-a-graph-25"
p <- ggplot(data = gapminder,
            mapping = aes(x = gdpPercap,
                          y = lifeExp))

## Put in an object for convenience
p_out <- p + geom_point(color = "purple") +
    geom_smooth(method = "loess") +
    scale_x_log10()
```


---

# Try again

```{r}
#| label: "03-make-a-graph-26"
#| fig.width: 8
#| fig.height: 5
p_out
```

---

# Geoms can take many arguments

- Here we [set]{.fg-orange} `color`, `size`, and `alpha`. Meanwhile `x` and `y` are [mapped]{.fg-lblue}.

- We also give non-default values to some other arguments

```{r }
#| label: "03-make-a-graph-27"
p <- ggplot(data = gapminder,
            mapping = aes(x = gdpPercap,
                          y = lifeExp)) 
p_out <- p + geom_point(alpha = 0.3) +
    geom_smooth(color = "orange", 
                se = FALSE, 
                linewidth = 8, 
                method = "lm") +
    scale_x_log10()
```

---

# Geoms can take many arguments

```{r}
#| label: "03-make-a-graph-28"
#| fig.width: 8.5
#| fig.height: 5
p_out
```

---

# Setting [`alpha`]{.fg-orange} is handy for overplotted data 

.pull-left.w45[
```{r}
#| label: "codefig-alphapoints"
#| message: FALSE
#| fig.show: "hide"
#| fig.width: 5
#| fig.height: 4.5
p <- ggplot(data = gapminder, 
            mapping = aes(x = gdpPercap, 
                          y = lifeExp))
p + geom_point(alpha = 0.3) + #<<
  geom_smooth(method = "lm") +
    scale_x_log10(labels = scales::label_dollar()) +
    labs(x = "GDP Per Capita", 
         y = "Life Expectancy in Years",
         title = "Economic Growth and Life Expectancy",
         subtitle = "Data points are country-years",
         caption = "Source: Gapminder.")
```
]

--

.pull-right.w55[
```{r}
#| label: "03-make-a-graph-extra"
#| echo: FALSE
  knitr::include_graphics(
  knitr::fig_chunk("codefig-alphapoints", "png"))
```
]

---

class: right bottom main-title section-title-1

## .huge.right.bottom.squish4[Map or Set values<br />.kjh-lblue[per geom]{.fg-yellow}]

---
`r chunq_reveal("reveal-pergeom1",  lcolw="45", rcolw="55", title = "# Geoms can take their own mappings")`

```{r}
#| label: "reveal-pergeom1"
#| include: FALSE
p <- ggplot(data = gapminder,
            mapping = aes(x = gdpPercap,
                          y = lifeExp,
                          color = continent,
                          fill = continent))
p + geom_point() +
    geom_smooth(method = "loess") +
    scale_x_log10(labels = scales::label_dollar())
```

---
`r chunq_reveal("reveal-pergeom2",  lcolw="45", rcolw="55", title = "# Geoms can take their own mappings")`

```{r}
#| label: "reveal-pergeom2"
#| include: FALSE
p <- ggplot(data = gapminder,
            mapping = aes(x = gdpPercap,
                          y = lifeExp))
p + geom_point(mapping = aes(color = continent)) +
    geom_smooth(method = "loess") +
    scale_x_log10(labels = scales::label_dollar())
 
```

---
layout: false
class: main-title main-title-inv middle

# .middle.squish4.large[Pay attention to which scales and guides are drawn, and why]{.fg-orange}

---




---

# Guides and scales reflect [`aes()`]{.fg-green} mappings

.pull-left[

- `mapping = aes(color = continent, fill = continent)`

.right[![:scale 44%](img/03_guides_1_classic.png)]

]

--

.pull-right[


- `mapping = aes(color = continent)`

.left[![:scale 42%](img/03_guides_2_classic.png)]

]

---
layout: false
class: main-title main-title-inv

# .middle.squish4.large[[Remember:]{.fg-blue} [Every mapped variable has a scale]{.fg-blue}]



---



# .huge[Saving your work]{.fg-lblue}

---




---

# Use [`ggsave()`]{.fg-green}

```{r}
#| label: "03-make-a-graph-29"
#| echo: TRUE
#| eval: FALSE

## Save the most recent plot
ggsave(filename = "figures/my_figure.png")


## Use here() for more robust file paths
ggsave(filename = here("figures", "my_figure.png"))

## A plot object
p_out <- p + geom_point(mapping = aes(color = log(pop))) +
    scale_x_log10()

ggsave(filename = here("figures", "lifexp_vs_gdp_gradient.pdf"), 
       plot = p_out)

ggsave(here("figures", "lifexp_vs_gdp_gradient.png"), 
       plot = p_out, 
       width = 8, 
       height = 5)
```

---

# In code chunks

## Set options in any chunk header:

.smaller[`{r, fig.height=8, fig.width=5, fig.show = "hold", fig.cap="A caption"}`]      


## Or for the whole document:

```{r}
#| label: "03-make-a-graph-30"
#| eval: FALSE
#| echo: TRUE
knitr::opts_chunk$set(warning = TRUE,
                        message = TRUE,
                        fig.retina = 3,
                        fig.align = "center",
                        fig.asp = 0.7,
                        dev = c("png", "pdf"))
```



---



# .huge[Getting Help]{.fg-lblue}

---
layout: false

![](img/03_r_help_annotated_all.png)

.right.w90.small[How to read an R Help page]

---
layout: false

![](img/03_r_help_annotated_01.png)

---
layout: false

![](img/03_r_help_annotated_02.png)

---
layout: false

![](img/03_r_help_annotated_03.png)

---
layout: false

![](img/03_r_help_annotated_04.png)








