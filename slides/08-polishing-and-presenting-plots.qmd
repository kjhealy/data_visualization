---
title: "Data Visualization - 8. Polishing and Presenting Plots"
format: kjhslides-revealjs
engine: knitr
filters:
  - invert-h1
  - line-highlight
  - include-code-files
author:
  - name: Kieran Healy
    affiliation: "Code Horizons"
date: last-modified
editor_options: 
  chunk_output_type: console
---


```{r}
#| label: "note"
#| include: FALSE
## NB: By default the  template will create a new subdirectory with its files inside.
```


```{r}
#| label: "packages"
#| include: FALSE
library(flipbookr)
library(here)
library(tidyverse)
library(kjhslides)
```


```{r}
#| label: "setup"
#| include: FALSE
## Configure the slides

kjh_register_tenso()    # Default fonts. Comment out if you don't have Tenso and Berkeley fonts.
kjh_set_knitr_opts()    
kjh_set_slide_theme()   # ggplot theme to go with slides. Set tenso = FALSE if necessary.


```





# [Polishing your plots]{.fg-yellow}<br /> [and Presenting them]{.fg-lblue}



## Load our packages

```{r}
#| label: "08-polishing-and-presenting-plots-1"
#| message: FALSE
library(here)       # manage file paths
library(tidyverse)  # your friend and mine
library(socviz)     # data and some useful functions
library(ggrepel)    # Text and labels
library(colorspace) # luminance-balanced palettes
library(scales)      # scale adjustments and enhancements
library(ggforce)    # useful enhancements to ggplot
```


# [Piece by piece,]{.fg-yellow}<br/>[Layer by layer]{.fg-lblue}

## Build your plots a piece at a time

```{r }
#| label: "08-polishing-and-presenting-plots-2"
asasec <- as_tibble(asasec)
asasec
```

## Build your plots a piece at a time

```{r}
#| label: "08-polishing-and-presenting-plots-3"
#| echo: FALSE
#| fig.height: 6
#| fig.width: 10
asasec |> 
  filter(Year == 2014) |> 
  ggplot(mapping = aes(x = Members, 
                       y = Revenues, 
                       label = Sname)) + 
  geom_smooth() + 
  geom_point()

```

## Build your plots a piece at a time

```{r}
#| label: "08-polishing-and-presenting-plots-4"
#| echo: FALSE
#| fig.height: 6
#| fig.width: 10
asasec |> 
  filter(Year == 2014) |> 
  ggplot(mapping = aes(x = Members, 
                       y = Revenues, 
                       label = Sname)) + 
  geom_smooth(method = "lm", 
              se = FALSE, 
              color = "gray60") +
  geom_point(mapping = aes(color = Journal), 
             size = rel(3)) + 
  geom_text_repel(data=subset(asasec,
                    Year == 2014 & 
                    Revenues > 7000),
                    size = rel(5), 
                    mapping = 
                    aes(family = "Tenso Slide")) + 
  scale_y_continuous(labels = 
                       scales::label_dollar()) + 
  labs(x="Membership", y="Revenues",
        color = "Section has own Journal",
        title = "ASA Sections",
        subtitle = "2014 Calendar year.",
        caption = "Source: ASA annual report.") + 
  theme(legend.position = "bottom")
  

```


`r chunq_reveal("reveal-asasteps",  lcolw="40", rcolw="60", title = "## Build your plots a piece at a time")`

```{r}
#| label: "reveal-asasteps"
#| include: FALSE
asasec |> 
  filter(Year == 2014) |> 
  ggplot(mapping = aes(x = Members, 
                       y = Revenues, 
                       label = Sname)) + 
  geom_smooth(method = "lm", 
              se = FALSE, 
              color = "gray60") +
  geom_point(mapping = aes(color = Journal), 
             size = rel(3)) + 
  geom_text_repel(data=subset(asasec,
                    Year == 2014 & 
                    Revenues > 7000),
                    size = rel(5), 
                    mapping = 
                    aes(family = "Tenso Slide")) + 
  scale_y_continuous(labels = 
                       scales::label_dollar()) + 
  labs(x="Membership", y="Revenues",
        color = "Section has own Journal",
        title = "ASA Sections",
        subtitle = "2014 Calendar year.",
        caption = "Source: ASA annual report.") + 
  theme(legend.position = "bottom")

```


# [More about Scales]{.fg-lblue}

```{r}
#| label: "08-polishing-and-presenting-plots-5"
#| echo: FALSE
kjh_set_classic_theme()
```
## Working with [`color`]{.fg-yellow} and [`fill`]{.fg-pink} scales

:::{.large}
[scale_]{.fg-green}[\<MAPPING\>]{.fg-orange}[_]{.fg-green}[\<KIND\>]{.fg-lblue}[()]{.fg-green}  
:::

- .large[Scale functions control the display of the variables they map. So to change the colors for `color` or `fill` mappings, you adjust the corresponding [`scale_`]{.fg-green} function, not the [`theme()`]{.fg-green} function.] 

- .large[[`ggplot`]{.fg-lblue} has several color palettes built in. A variety of packages provide others.] 

`r chunq_reveal("reveal-scalemanual",  lcolw="40", rcolw="60", title = "## You can specify scales manually")`

```{r}
#| label: "reveal-scalemanual"
#| include: FALSE
organdata |> 
  ggplot(mapping = aes(x = roads,
                       y = donors, 
                       color = world)) + 
  geom_point(size = 4) -> 
  p


```

```{r}
#| eval: FALSE
p <- organdata |> 
  ggplot(mapping = aes(x = roads,
                       y = donors, 
                       color = world)) + 
  geom_point(size = 4)
```


`r chunq_reveal("reveal-scalemanual2",  lcolw="40", rcolw="60", title = "## You can always specify scales manually")`

```{r}
#| label: "reveal-scalemanual2"
#| include: FALSE
p + 
  scale_color_manual(
  values = c("red", "green", "blue"))

```


`r chunq_reveal("reveal-scalemanual3",  lcolw="40", rcolw="60", title = "## You can always specify scales manually")`

```{r}
#| label: "reveal-scalemanual3"
#| include: FALSE
p + 
  scale_color_manual(
  values = c("#1B9E77","#D95F02", "#7570B3"))

```


`r chunq_reveal("reveal-scalemanual4",  lcolw="40", rcolw="60", title = "## You can specify scales manually")`

```{r}
#| label: "reveal-scalemanual4"
#| include: FALSE

colkey <- c("Corporatist" = "pink", 
            "Liberal" = "goldenrod", 
            "SocDem" = "firebrick")
colkey

p + scale_color_manual(
  values = colkey)

```

## But many balanced palettes are available

:::: {.columns}
::: {.column width="35%"}
- E.g., the `RColorBrewer` Palettes
- These are available through the [`scale_color-brewer()`]{.fg-green} and [`scale_fill_brewer()`]{.fg-green} functions, as well as independently.
- See the palettes with [`RColorBrewer::display.brewer.all()`]{.fg-green}

:::

::: {.column width="65%" .right}
### _Qualitative_ palettes

```{r}
#| label: "08-polishing-and-presenting-plots-6"
#| echo: FALSE
#| fig.height: 5.5
#| fig.width: 7
opar <- par(mar = c(5.1, 4.1, 4.1, 2.1))
par(mar=c(0,4,0,0))
RColorBrewer::display.brewer.all(type = "qual")
par(opar)
```

:::
::::



## But many balanced palettes are available

:::: {.columns}
::: {.column width="35%"}
- E.g., the `RColorBrewer` Palettes
- These are available through the [`scale_color-brewer()`]{.fg-green} and [`scale_fill_brewer()`]{.fg-green} functions, as well as independently.
- See the palettes with [`RColorBrewer::display.brewer.all()`]{.fg-green}

:::

::: {.column width="65%" .right}
### _Qualitative_ palettes

### _Sequential_ palettes

```{r}
#| label: "08-polishing-and-presenting-plots-7"
#| echo: FALSE
#| fig.height: 5.5
#| fig.width: 4
par(mar=c(0,4,0,0))
RColorBrewer::display.brewer.all(type = "seq")
```
:::
::::





]

## But many balanced palettes are available

:::: {.columns}
::: {.column width="35%"}
- E.g., the `RColorBrewer` Palettes
- These are available through the [`scale_color-brewer()`]{.fg-green} and [`scale_fill_brewer()`]{.fg-green} functions, as well as independently.
- See the palettes with [`RColorBrewer::display.brewer.all()`]{.fg-green}

:::

::: {.column width="65%" .right}
### _Diverging_ palettes

```{r}
#| label: "08-polishing-and-presenting-plots-8"
#| echo: FALSE
#| fig.height: 5.5
#| fig.width: 6
par(mar=c(0,4,0,0))
RColorBrewer::display.brewer.all(type = "div")
```

:::
::::


## Qualitative Brewer Palettes


```{r}
#| label: "08-polishing-and-presenting-plots-9"
#| eval: FALSE
#| fig.show: "hold"
#| out.width: "50%"
p + geom_point(size = 2) + 
  scale_color_brewer(palette = "Set2") +
  labs(title = "Set2")

p + geom_point(size = 2) + 
  scale_color_brewer(palette = "Pastel2") +
  labs(title = "Pastel2")

p + geom_point(size = 2) + 
  scale_color_brewer(palette = "Dark2") +
  labs(title = "Dark2")

p + geom_point(size = 2) + 
  scale_color_brewer(palette = "Accent") +
  labs(title = "Accent")
```

## Some color palettes

:::: {.columns}
::: {.column width="50%"}
```{r}
#| label: "08-polishing-and-presenting-plots-10"
#| echo: FALSE
#| fig.height: 4
#| fig.width: 6
p + geom_point(size = 3) + 
  scale_color_brewer(palette = "Set2") +
  labs(title = "Set2")
```

```{r}
#| label: "08-polishing-and-presenting-plots-11"
#| echo: FALSE
#| fig.height: 4
#| fig.width: 6
p + geom_point(size = 3) + 
  scale_color_brewer(palette = "Pastel2") +
  labs(title = "Pastel2")
```

:::

::: {.column width="50%" .right}
```{r}
#| label: "08-polishing-and-presenting-plots-12"
#| echo: FALSE
#| fig.height: 4
#| fig.width: 6
p + geom_point(size = 3) + 
  scale_color_brewer(palette = "Dark2") +
  labs(title = "Dark2")
```

```{r}
#| label: "08-polishing-and-presenting-plots-13"
#| echo: FALSE
#| fig.height: 4
#| fig.width: 6
p + geom_point(size = 3) + 
  scale_color_brewer(palette = "Accent") +
  labs(title = "Accent")
```

:::
::::


## The [`colorspace`]{.fg-lblue} package has even more

![Many palettes](img/08_colorspace_package.png)

---

```{r}
#| label: "08-polishing-and-presenting-plots-14"
#| fig.height: 8
#| fig.width: 16
#| echo: FALSE
colorspace::hcl_palettes(plot = TRUE)
```


So many colors

## The [`colorspace`]{.fg-lblue} function convention

:::{.large}
[scale_]{.fg-green}[\<MAPPING\>]{.fg-orange}[_]{.fg-green}[\<KIND\>]{.fg-lblue}[\<COLORSCALE\>]{.fg-pink}[()]{.fg-green}  
:::

:::: {.columns}
::: {.column width="50%"}
[`scale_color_binned_diverging()`]{.fg-green}

[`scale_color_binned_qualitative()`]{.fg-green}

[`scale_color_binned_sequential()`]{.fg-green}

[`scale_color_continuous_diverging()`]{.fg-green}

[`scale_color_continuous_qualitative()`]{.fg-green}

[`scale_color_continuous_sequential()`]{.fg-green}

[`scale_color_discrete_diverging()`]{.fg-green}

[`scale_color_discrete_qualitative()`]{.fg-green}

[`scale_color_discrete_sequential()`]{.fg-green}
:::

::: {.column width="50%" .right}
[`scale_fill_binned_diverging()`]{.fg-green}

[`scale_fill_binned_divergingx()`]{.fg-green}

[`scale_fill_binned_qualitative()`]{.fg-green}

[`scale_fill_binned_sequential()`]{.fg-green}

[`scale_fill_continuous_diverging()`]{.fg-green}

[`scale_fill_continuous_qualitative()`]{.fg-green}

[`scale_fill_continuous_sequential()`]{.fg-green}

[`scale_fill_discrete_diverging()`]{.fg-green}

[`scale_fill_discrete_qualitative()`]{.fg-green}

[`scale_fill_discrete_sequential()`]{.fg-green}
:::
::::


# [Layer color and text<br />]{.fg-yellow}[to your advantage]{.fg-lblue}

```{r}
#| label: "08-polishing-and-presenting-plots-15"
#| echo: FALSE
kjh_set_slide_theme()
```


```{r}
#| label: "08-polishing-and-presenting-plots-16"
#| echo: FALSE
#| fig.width: 15
#| fig.height: 8.5
# Democratic Blue and Republican Red
party_colors <- c("#2E74C0", "#CB454A")
party_colors <- c("royalblue1", "red2")

ggplot(data = subset(county_data,
                     flipped == "No"),
       mapping = aes(x = pop,
                     y = black/100)) + 
  geom_point(alpha = 0.15, color = "gray30", 
             size = rel(2)) +
  scale_x_log10(labels = label_comma()) + 
  geom_point(data = subset(county_data,
                      flipped == "Yes"),
             mapping = aes(x = pop, y = black/100,
                           color = partywinner16), 
             size = rel(2)) +
  geom_text_repel(data = subset(county_data,
                                flipped == "Yes" &
                                  black  > 25),
                  mapping = aes(x = pop,
                                y = black/100,
                                label = state, 
                                family = "Tenso Slide", 
                                face = "bold"), 
                  size = 3.5) + 
  scale_color_manual(values = party_colors) + 
  scale_y_continuous(labels = label_percent()) +
  labs(color = "County flipped to ... ",
       x = "County Population (log scale)",
       y = "Percent Black Population",
       title = "Flipped counties, 2016",
       caption = "Counties in gray did not flip.")


```

`r chunq_reveal("reveal-fliptrump",  lcolw="45", rcolw="55", title = "## We know how to build this")`

```{r}
#| label: "reveal-fliptrump"
#| include: FALSE
# Brighter Blue and Red
party_colors <- c("royalblue1", "red2")

ggplot(data = subset(county_data,
                     flipped == "No"),
       mapping = aes(x = pop,
                     y = black/100)) + 
  geom_point(alpha = 0.15, color = "gray30", 
             size = rel(2)) +
  scale_x_log10(labels = label_comma()) + 
  geom_point(data = subset(county_data,
                      flipped == "Yes"),
             mapping = aes(x = pop, y = black/100,
                           color = partywinner16), 
             size = rel(2)) +
  geom_text_repel(data = subset(county_data,
              flipped == "Yes" & black  > 25),
                  mapping = aes(x = pop,
                    y = black/100, label = state, 
                    family = "Tenso Slide", 
                    face = "bold"), size = rel(3.5)) + 
  scale_color_manual(values = party_colors) + 
  scale_y_continuous(labels = label_percent()) +
  labs(color = "County flipped to ... ",
       x = "County Population (log scale)",
       y = "Percent Black Population",
       title = "Flipped counties, 2016",
       caption = "Counties in gray did not flip.")
 
```

# [Leverage ggplot's]{.fg-orange}<br />[layered approach]{.fg-lblue}

```{r}
#| label: "08-polishing-and-presenting-plots-17"
#| echo: FALSE
county_data <- as_tibble(county_data) |> 
  filter(!is.na(name) & name %nin% as.character(c(1:52)))

pop_min <- min(county_data$pop)
pop_max <- max(county_data$pop)

black_min <- min(county_data$black/100)
black_max <- max(county_data$black/100 + 0.047)

x_label <- "County Population (log scale)"
y_label <- "Percent Black Population"

x_breaks <- c(1e3, 1e4, 1e5, 1e6, 1e7)
y_breaks <- seq(from = 0, to = 0.8, by = 0.2)
data_point_size <- rel(3)

p_layer_1 <- ggplot(data = county_data,
                    mapping = aes(x = pop, y = black/100)) + 
  geom_point(color = "gray20", 
             alpha = 0.25, 
             size = data_point_size) + 
  scale_x_log10(breaks = x_breaks,
                labels = label_number(scale_cut = cut_short_scale())) + 
  scale_y_continuous(breaks = y_breaks, 
                     labels = label_percent()) +
  expand_limits(x = pop_max, 
                y = black_max) +
  labs(x = x_label,
       y = y_label,
       title = "U.S. Counties by Population and Percent Black",
       caption = "")

p_layer_2 <- ggplot(data = subset(county_data,
                     flipped == "No"),
                    mapping = aes(x = pop, y = black/100)) + 
  geom_point(color = "gray20", 
             alpha = 0.25, 
             size = data_point_size) + 
  expand_limits(x = pop_max, 
                y = black_max) +
  scale_x_log10(breaks = x_breaks,
                labels = label_number(scale_cut = cut_short_scale())) + 
  scale_y_continuous(breaks = y_breaks, 
                     labels = label_percent()) +
  labs(x = x_label,
       y = y_label,
       title = "These counties did not flip in 2016",
       caption = "")


p_layer_3 <- ggplot(data = subset(county_data,
                     flipped == "Yes"),
                    mapping = aes(x = pop, y = black/100)) + 
  geom_point(color = "gray5", 
             alpha = 0.25, 
             size = data_point_size) + 
   geom_point(data = subset(county_data,
                     flipped == "Yes"), 
              color = NA, 
              alpha = 0,
              size = data_point_size) +
  scale_x_log10(breaks = x_breaks,
                labels = label_number(scale_cut = cut_short_scale())) + 
  scale_y_continuous(breaks = y_breaks, 
                     labels = label_percent()) +
  expand_limits(x = pop_max, 
                y = black_max) +
  labs(x = x_label,
       y = y_label,
       title = "These counties did",
       caption = "")


p_layer_4 <- ggplot(data = subset(county_data,
                     flipped == "No"),
                    mapping = aes(x = pop, y = black/100)) + 
  geom_point(color = "gray30", 
             alpha = 0.25, 
             size = data_point_size) + 
  geom_point(data = subset(county_data,
                      flipped == "Yes"),
             mapping = aes(x = pop, y = black/100,
                           color = partywinner16), 
             size = data_point_size) + 
  scale_x_log10(breaks = x_breaks,
                labels = label_number(scale_cut = cut_short_scale())) + 
  scale_y_continuous(breaks = y_breaks, 
                     labels = label_percent()) +
  scale_color_manual(values = party_colors) +
  expand_limits(x = pop_max, 
                y = black_max) +
  labs(x = x_label,
       y = y_label,
       title = "Counties that flipped shown by party color",
       color = "Flipped to",
       caption = "Counties in gray did not flip.")

p_layer_5 <- ggplot(data = subset(county_data,
                     flipped == "No"),
                    mapping = aes(x = pop, y = black/100)) + 
  geom_point(color = "gray30", 
             alpha = 0.25, 
             size = data_point_size) + 
  geom_point(data = subset(county_data,
                      flipped == "Yes"),
             mapping = aes(x = pop, y = black/100,
                           color = partywinner16), 
             size = rel(2)) + 
  geom_label_repel(data = subset(county_data,
              flipped == "Yes" & black  > 25),
                  mapping = aes(x = pop,
                    y = black/100, label = state, 
                    family = "Tenso Slide", 
                    face = "bold"), size = rel(3.5)) + 
  scale_x_log10(breaks = x_breaks,
                labels = label_number(scale_cut = cut_short_scale())) + 
  scale_y_continuous(breaks = y_breaks, 
                     labels = label_percent()) +
  scale_color_manual(values = party_colors) +
  expand_limits(x = pop_max, 
                y = black_max) +
  labs(x = x_label,
       y = y_label,
       color = "Flipped to",
       title = "Counties that flipped shown by party color, and labeled by state",
       caption = "Counties in gray did not flip.")


## Zoom in -- replace expand_limits() with coord_cartesian()
## Adjust repel criteria also
p_layer_6 <- ggplot(data = subset(county_data,
                     flipped == "No"),
                    mapping = aes(x = pop, y = black/100)) + 
  geom_point(color = "gray30", 
             alpha = 0.25, 
             size = data_point_size) + 
  geom_point(data = subset(county_data,
                      flipped == "Yes"),
             mapping = aes(x = pop, y = black/100,
                           color = partywinner16), 
             size = rel(2)) + 
  geom_label_repel(data = subset(county_data,
              flipped == "Yes" & black  
              > 20 & black < 50),
                  mapping = aes(x = pop,
                    y = black/100, label = state, 
                    family = "Tenso Slide", 
                    face = "bold"), size = rel(3.5)) + 
  scale_x_log10(breaks = x_breaks,
                labels = label_number(scale_cut = cut_short_scale())) + 
  scale_y_continuous(breaks = y_breaks, 
                     labels = label_percent()) +
  scale_color_manual(values = party_colors) +
  coord_cartesian(xlim = c(0.75e4, 1.5e5), 
                  ylim = c(0.2, 0.5)) +
  labs(x = x_label,
       y = y_label,
       color = "Flipped to",
       title = "Counties that flipped shown by party color, and labeled by state; zoomed-in",
       caption = "Counties in gray did not flip.")



```

---

```{r}
#| label: "08-polishing-and-presenting-plots-18"
#| echo: FALSE
#| fig.width: 15
#| fig.height: 8.5
p_layer_1
```

---


```{r}
#| label: "08-polishing-and-presenting-plots-19"
#| echo: FALSE
#| fig.width: 15
#| fig.height: 8.5
p_layer_2
```

---

```{r}
#| label: "08-polishing-and-presenting-plots-20"
#| echo: FALSE
#| fig.width: 15
#| fig.height: 8.5
p_layer_3
```

---

```{r}
#| label: "08-polishing-and-presenting-plots-21"
#| echo: FALSE
#| fig.width: 15
#| fig.height: 8.5
p_layer_4
```

---


```{r}
#| label: "08-polishing-and-presenting-plots-22"
#| echo: FALSE
#| fig.width: 15
#| fig.height: 8.5
p_layer_5
```

---

```{r}
#| label: "08-polishing-and-presenting-plots-23"
#| echo: FALSE
#| fig.width: 15
#| fig.height: 8.5
p_layer_6
```


---

```{r}
#| label: "08-polishing-and-presenting-plots-24"
#| echo: FALSE
#| fig.width: 15
#| fig.height: 8.5
p_layer_5
```

---

# [Layer,]{.fg-lblue}<br />[Highlight,]{.fg-pink}<br />[Repeat]{.fg-lblue}

## Build from ideas to data

![The relationship of interest](img/08_status_conceptual.png)

## Build from ideas to data

![Theory says ...](img/08_status_hypotheses.png)


## Build from ideas to data

![Data suggests ...](img/08_status_results.png)

---

## Repeat to [differentiate]{.fg-lblue}

![Pointrange](img/08_model_controls_pointrange_IRRs_MASSnb.png)


## Repeat to [differentiate]{.fg-lblue}

![Add a comparison group](img/08_mode_lsm_nb_gender_journal.png)

## Layer and repeat with [facets]{.fg-lblue}

![Compare across facets](img/08_growth_curve_quantile_quantreg_gender.png)

## Layer and repeat [across]{.fg-lblue} facets

![Layer to compare](img/08_altservices.png)

---

## Layer and repeat [across]{.fg-lblue} facets

![Layer to copmare](img/08_altservices2.png)


## X-Ray Vision

![Seeing through it](img/08_layers_all_labeled.png)

## .huge[[T]{.fg-lblue}[h]{.fg-yellow}[e]{.fg-pink}[m]{.fg-green}[e]{.fg-orange}.kjh-grey[s]]

## Themes ...

- are controlled by the [`theme()`]{.fg-green} function
- can be bundled into functions of their own, like [`theme_bw()`]{.fg-green} or [`theme_minimal()`]{.fg-green}
- can be set for the duration of a file or project with [`theme_set()`]{.fg-green}
- make changes that are applied _additively_
- and most importantly ...

---

# [Thematic elements do not represent data directly]{.fg-orange}

## Make a plot

```{r }
#| label: "08-polishing-and-presenting-plots-25"
kjh_set_classic_theme(3)
```

```{r}
#| label: "codefig-themes1"
#| message: FALSE
#| fig.width: 4.8
#| fig.height: 4.5
#| output-location: column

p <- organdata |> 
  drop_na(world) |> 
  ggplot(mapping = aes(x = roads, y = donors, 
                          color = world)) + 
  geom_point(size = 3) + 
  labs(x = "Road Deaths", 
       y = "Procurement Rate",
       title = "By Welfare State Regime")

p 

```


## Add a theme ... [`theme_bw()`]{.fg-green}

```{r}
#| label: "codefig-theme2"
#| message: FALSE
#| fig.width: 4.8
#| fig.height: 4.5
#| output-location: column
p + theme_bw()
```

## Add a theme ... [`theme_minimal()`]{.fg-green}


```{r}
#| label: "codefig-theme3"
#| message: FALSE
#| fig.width: 4.8
#| fig.height: 4.5
#| output-location: column
p + theme_minimal()
```

## Add a theme ... [`theme_dark()`]{.fg-green}

```{r}
#| label: "codefig-themedark"
#| message: FALSE
#| fig.width: 4.8
#| fig.height: 4.5
#| output-location: column
p + theme_dark()
```

## Adjustments with the [`theme()`]{.fg-green} function

```{r}
#| label: "codefig-themeadditive"
#| message: FALSE
#| fig.width: 4.8
#| fig.height: 4.5
#| output-location: column

p + theme_bw() +
  theme(legend.position = "top")

```

- None of this directly touches the parts of the plot that are representing your data---i.e. the visual parts that are mapped to a variable, and thus have a scale. Adjusting those is the job of the [`scale_`]{.fg-green} and [`guide()`]{.fg-green} functions.

## There are _many_ adjustable theme elements

:::: {.columns}
::: {.column width="50%"}
[line]{.fg-orange}  [rect]{.fg-orange} [text]{.fg-orange} [title]{.fg-orange} [aspect.ratio]{.fg-orange}

[axis.title]{.fg-orange} [axis.title.x]{.fg-orange} [axis.title.x.top]{.fg-orange} [axis.title.x.bottom]{.fg-orange} [axis.title.y]{.fg-orange} [axis.title.y.left]{.fg-orange} [axis.title.y.right]{.fg-orange} [axis.text]{.fg-orange} [axis.text.x]{.fg-orange} [axis.text.x.top]{.fg-orange} [axis.text.x.bottom]{.fg-orange} [axis.text.y]{.fg-orange} [axis.text.y.left]{.fg-orange} [axis.text.y.right]{.fg-orange} [axis.ticks]{.fg-orange} [axis.ticks.x]{.fg-orange} [axis.ticks.x.top]{.fg-orange} [axis.ticks.x.bottom]{.fg-orange} [axis.ticks.y]{.fg-orange} [axis.ticks.y.left]{.fg-orange} [axis.ticks.y.right]{.fg-orange} [axis.ticks.length]{.fg-orange} [axis.ticks.length.x]{.fg-orange} [axis.ticks.length.x.top]{.fg-orange} [axis.ticks.length.x.bottom]{.fg-orange} [axis.ticks.length.y]{.fg-orange} [axis.ticks.length.y.left]{.fg-orange} [axis.ticks.length.y.right]{.fg-orange} [axis.line]{.fg-orange} [axis.line.x]{.fg-orange} [axis.line.x.top]{.fg-orange} [axis.line.x.bottom]{.fg-orange} [axis.line.y]{.fg-orange} [axis.line.y.left]{.fg-orange} [axis.line.y.right]{.fg-orange}

:::

::: {.column width="50%" .right}
[legend.background]{.fg-orange} [legend.margin]{.fg-orange} [legend.spacing]{.fg-orange} [legend.spacing.x]{.fg-orange} [legend.spacing.y]{.fg-orange} [legend.key]{.fg-orange} [legend.key.size]{.fg-orange} [legend.key.height]{.fg-orange} [legend.key.width]{.fg-orange} [legend.text]{.fg-orange} [legend.text.align]{.fg-orange} [legend.title]{.fg-orange} [legend.title.align]{.fg-orange} [legend.position]{.fg-orange} [legend.direction]{.fg-orange} [legend.justification]{.fg-orange} [legend.box]{.fg-orange} [legend.box.just]{.fg-orange} [legend.box.margin]{.fg-orange} [legend.box.background]{.fg-orange} [legend.box.spacing]{.fg-orange}

[panel.background]{.fg-orange} [panel.border]{.fg-orange} [panel.spacing]{.fg-orange} [panel.spacing.x]{.fg-orange} [panel.spacing.y]{.fg-orange} [panel.grid]{.fg-orange} [panel.grid.major]{.fg-orange} [panel.grid.minor]{.fg-orange} [panel.grid.major.x]{.fg-orange} [panel.grid.major.y]{.fg-orange} [panel.grid.minor.x]{.fg-orange} [panel.grid.minor.y]{.fg-orange} [panel.ontop]{.fg-orange} [plot.background]{.fg-orange} 

[plot.title]{.fg-orange} [plot.title.position]{.fg-orange} [plot.subtitle]{.fg-orange} [plot.caption]{.fg-orange} [plot.caption.position]{.fg-orange} [plot.tag]{.fg-orange} [plot.tag.position]{.fg-orange} [plot.margin]{.fg-orange}

[strip.background]{.fg-orange} [strip.background.x]{.fg-orange} [strip.background.y]{.fg-orange} [strip.placement]{.fg-orange} [strip.text]{.fg-orange} [strip.text.x]{.fg-orange} [strip.text.y]{.fg-orange} [strip.switch.pad.grid]{.fg-orange} [strip.switch.pad.wrap]{.fg-orange}
:::
::::

## But they are structured 

:::: {.columns}
::: {.column width="50%"}
[line]{.fg-pink}  [rect]{.fg-pink} [text]{.fg-pink} [title]{.fg-pink} [aspect.ratio]{.fg-pink}

[axis.title]{.fg-lblue} [axis.title.x]{.fg-lblue} [axis.title.x.top]{.fg-lblue} [axis.title.x.bottom]{.fg-lblue} [axis.title.y]{.fg-lblue} [axis.title.y.left]{.fg-lblue} [axis.title.y.right]{.fg-lblue} [axis.text]{.fg-lblue} [axis.text.x]{.fg-lblue} [axis.text.x.top]{.fg-lblue} [axis.text.x.bottom]{.fg-lblue} [axis.text.y]{.fg-lblue} [axis.text.y.left]{.fg-lblue} [axis.text.y.right]{.fg-lblue} [axis.ticks]{.fg-lblue} [axis.ticks.x]{.fg-lblue} [axis.ticks.x.top]{.fg-lblue} [axis.ticks.x.bottom]{.fg-lblue} [axis.ticks.y]{.fg-lblue} [axis.ticks.y.left]{.fg-lblue} [axis.ticks.y.right]{.fg-lblue} [axis.ticks.length]{.fg-lblue} [axis.ticks.length.x]{.fg-lblue} [axis.ticks.length.x.top]{.fg-lblue} [axis.ticks.length.x.bottom]{.fg-lblue} [axis.ticks.length.y]{.fg-lblue} [axis.ticks.length.y.left]{.fg-lblue} [axis.ticks.length.y.right]{.fg-lblue} [axis.line]{.fg-lblue} [axis.line.x]{.fg-lblue} [axis.line.x.top]{.fg-lblue} [axis.line.x.bottom]{.fg-lblue} [axis.line.y]{.fg-lblue} [axis.line.y.left]{.fg-lblue} [axis.line.y.right]{.fg-lblue}
:::

::: {.column width="50%" .right}
[legend.background]{.fg-green} [legend.margin]{.fg-green} [legend.spacing]{.fg-green} [legend.spacing.x]{.fg-green} [legend.spacing.y]{.fg-green} [legend.key]{.fg-green} [legend.key.size]{.fg-green} [legend.key.height]{.fg-green} [legend.key.width]{.fg-green} [legend.text]{.fg-green} [legend.text.align]{.fg-green} [legend.title]{.fg-green} [legend.title.align]{.fg-green} [legend.position]{.fg-green} [legend.direction]{.fg-green} [legend.justification]{.fg-green} [legend.box]{.fg-green} [legend.box.just]{.fg-green} [legend.box.margin]{.fg-green} [legend.box.background]{.fg-green} [legend.box.spacing]{.fg-green}

[panel.background]{.fg-orange} [panel.border]{.fg-orange} [panel.spacing]{.fg-orange} [panel.spacing.x]{.fg-orange} [panel.spacing.y]{.fg-orange} [panel.grid]{.fg-orange} [panel.grid.major]{.fg-orange} [panel.grid.minor]{.fg-orange} [panel.grid.major.x]{.fg-orange} [panel.grid.major.y]{.fg-orange} [panel.grid.minor.x]{.fg-orange} [panel.grid.minor.y]{.fg-orange} [panel.ontop]{.fg-orange} 

[plot.background]{.fg-orange} [plot.title]{.fg-orange} [plot.title.position]{.fg-orange} [plot.subtitle]{.fg-orange} [plot.caption]{.fg-orange} [plot.caption.position]{.fg-orange} [plot.tag]{.fg-orange} [plot.tag.position]{.fg-orange} [plot.margin]{.fg-orange}

[strip.background]{.fg-blue} [strip.background.x]{.fg-blue} [strip.background.y]{.fg-blue} [strip.placement]{.fg-blue} [strip.text]{.fg-blue} [strip.text.x]{.fg-blue} [strip.text.y]{.fg-blue} [strip.switch.pad.grid]{.fg-blue} [strip.switch.pad.wrap]{.fg-blue}
:::
::::

## And _inherit_  

:::: {.columns}
::: {.column width="50%"}
**[line]{.fg-pink}**  **[rect]{.fg-pink}** **[text]{.fg-pink}** **[title]{.fg-pink}** **[aspect.ratio]{.fg-pink}**

**[axis.title]{.fg-lblue}** .tiny[[axis.title.x]{.fg-lblue} [axis.title.x.top]{.fg-lblue} [axis.title.x.bottom]{.fg-lblue} [axis.title.y]{.fg-lblue} [axis.title.y.left]{.fg-lblue} [axis.title.y.right]{.fg-lblue}] **[axis.text]{.fg-lblue}** .tiny[[axis.text.x]{.fg-lblue} [axis.text.x.top]{.fg-lblue} [axis.text.x.bottom]{.fg-lblue} [axis.text.y]{.fg-lblue} [axis.text.y.left]{.fg-lblue} [axis.text.y.right]{.fg-lblue}] **[axis.ticks]{.fg-lblue}** .tiny[[axis.ticks.x]{.fg-lblue} [axis.ticks.x.top]{.fg-lblue} [axis.ticks.x.bottom]{.fg-lblue} [axis.ticks.y]{.fg-lblue} [axis.ticks.y.left]{.fg-lblue} [axis.ticks.y.right]{.fg-lblue} [axis.ticks.length]{.fg-lblue} [axis.ticks.length.x]{.fg-lblue} [axis.ticks.length.x.top]{.fg-lblue} [axis.ticks.length.x.bottom]{.fg-lblue} [axis.ticks.length.y]{.fg-lblue} [axis.ticks.length.y.left]{.fg-lblue} [axis.ticks.length.y.right]{.fg-lblue}] **[axis.line]{.fg-lblue}** .tiny[[axis.line.x]{.fg-lblue} [axis.line.x.top]{.fg-lblue} [axis.line.x.bottom]{.fg-lblue} [axis.line.y]{.fg-lblue} [axis.line.y.left]{.fg-lblue} [axis.line.y.right]{.fg-lblue}]
:::

::: {.column width="50%" .right}
**[legend.background]{.fg-green}** **[legend.margin]{.fg-green}** **[legend.spacing]{.fg-green}** .tiny[[legend.spacing.x]{.fg-green} [legend.spacing.y]{.fg-green}] **[legend.key]{.fg-green}** .tiny[[legend.key.size]{.fg-green} [legend.key.height]{.fg-green} [legend.key.width]{.fg-green}] **[legend.text]{.fg-green}** **[legend.text.align]{.fg-green}** **[legend.title]{.fg-green}** **[legend.title.align]{.fg-green}** **[legend.position]{.fg-green}** **[legend.direction]{.fg-green}** **[legend.justification]{.fg-green}** **[legend.box]{.fg-green}** .tiny[[legend.box.just]{.fg-green} [legend.box.margin]{.fg-green} [legend.box.background]{.fg-green} [legend.box.spacing]{.fg-green}]

**[panel.background]{.fg-orange}** **[panel.border]{.fg-orange}** **[panel.spacing]{.fg-orange}** .tiny[[panel.spacing.x]{.fg-orange} [panel.spacing.y]{.fg-orange}] **[panel.grid]{.fg-orange}** .tiny[[panel.grid.major]{.fg-orange} [panel.grid.minor]{.fg-orange} [panel.grid.major.x]{.fg-orange} [panel.grid.major.y]{.fg-orange} [panel.grid.minor.x]{.fg-orange} [panel.grid.minor.y]{.fg-orange}] **[panel.ontop]{.fg-orange}**

**[plot.background]{.fg-orange}** **[plot.title]{.fg-orange}** **[plot.title.position]{.fg-orange}** **[plot.subtitle]{.fg-orange}** **[plot.caption]{.fg-orange}** **[plot.caption.position]{.fg-orange}** **[plot.tag]{.fg-orange}** **[plot.tag.position]{.fg-orange}** **[plot.margin]{.fg-orange}**

**[strip.background]{.fg-blue}** .tiny[[strip.background.x]{.fg-blue} [strip.background.y]{.fg-blue}] **[strip.placement]{.fg-blue}** **[strip.text]{.fg-blue}** .tiny[[strip.text.x]{.fg-blue} [strip.text.y]{.fg-blue}] **[strip.switch.pad.grid]{.fg-blue}** **[strip.switch.pad.wrap]{.fg-blue}**
]

:::
::::

## Two kinds of adjustment

### It's a single setting. E.g, `legend.position` can be `"none"`, `"left"`, `"right"`, `"bottom"`, or `"top"`

- Hence, e.g., [`theme(`]{.fg-green}[`legend.position = "top"`]{.fg-orange}[`)`]{.fg-green}, which we have seen several times. Similarly for e.g. [`legend.direction`]{.fg-orange} (can be "horizontal" or "vertical").

- It's a component of the plot that might be styled in several ways. E.g., The text on the axes, or the lines in the plot panel.

If the latter ...

## If adjusting a thematic element, first ask ...

::: {.incremental}
- _Where_ on the plot is it?
- Is it part of an _axis_, part of the _panel_, the _strip_ (facet title) box, or the _legend_? This will help you find the name of the thing you want to adjust. 
- E.g. "I want to adjust the text for the markings on the x-axis"
- You want [axis.ticks.x]{.fg-orange}
- E.g. "I want to adjust the styling of the main y-axis grid lines inside the plot" 
- You want [panel.grid.major.y]{.fg-orange}
:::


## If adjusting a thematic element, then ask ...

::: {.incremental}
- What _kind_ of element is it?
- Is it _text_, or a _line_, or a _rectangle_?
- This will tell you what function to use to make the adjustment to the named element. 
- If it's text, adjust the element with [`element_text()`]{.fg-green} 
- If it's a line, adjust it with [`element_line()`]{.fg-green}
- If it's a rectangle, with [`element_rect()`]{.fg-green}
- If you want to _fully turn off_ an element, use [`element_blank()`]{.fg-green}
:::

## For example ...

.large["I want to adjust the styling of the plot title"]


::: {.incremental}
- The relevant element is [`plot.title`]{.fg-orange}. 
- It's _text_.
- Inside the theme function, adjust it with [`element_text()`]{.fg-green}. 

:::


## For example ...

```{r}
#| label: "codefig-elementtext"
#| message: FALSE
#| fig.width: 4.8
#| fig.height: 4.5
#| output-location: column

p + theme(plot.title = 
            element_text(size = rel(3),
                         face = "bold", 
                         color = "orange"))

```

## For example ...

.large["I want to adjust y axis grid lines on the plot"]

::: {.incremental}
- The relevant elements are [`panel.grid.major.y`]{.fg-orange} and [`panel.grid.minor.y`]{.fg-orange}. 
- These are _lines_.
- Inside the theme function, adjust it with [`element_line()`]{.fg-green}. 

:::

## For example ...


```{r}
#| label: "codefig-elementline"
#| message: FALSE
#| fig.width: 4.8
#| fig.height: 4.5
#| output-location: column

p + theme(panel.grid.major.y = 
            element_line(color = "red"),
          panel.grid.minor.y = 
            element_line(color = "black", 
                         linetype = "dotted"))

```


# [The]{.fg-yellow} [`ggthemes`]{.fg-lblue} [package]{.fg-yellow}


---

```{r}
#| label: "08-polishing-and-presenting-plots-33"
#| echo: FALSE
#| fig.width: 12
#| fig.height: 8
p_layer_4
```

We made this earlier. Here it is in a default theme.

## Theming a plot

```{r }
#| label: "08-polishing-and-presenting-plots-34"
library(ggthemes)
theme_set(theme_fivethirtyeight())

```

See how the full function call goes inside [`theme_set()`]{.fg-green}, including the parentheses, because we are actually running that function to set all the elements.


---

```{r}
#| label: "08-polishing-and-presenting-plots-35"
#| echo: FALSE
#| fig.width: 12
#| fig.height: 8
p_layer_4
```

Calling the object now draws the plot with the thematic elements added.

## Theming a plot

```{r }
#| label: "08-polishing-and-presenting-plots-36"
theme_set(theme_economist())

```

---


```{r}
#| label: "08-polishing-and-presenting-plots-37"
#| echo: FALSE
#| fig.width: 12
#| fig.height: 8
p_layer_4
```

Calling the object now draws the plot with the thematic elements added.


## This seems morally wrong

```{r }
#| label: "08-polishing-and-presenting-plots-38"
theme_set(theme_stata())

```

---

```{r}
#| label: "08-polishing-and-presenting-plots-39"
#| echo: FALSE
#| fig.width: 12
#| fig.height: 8
p_layer_4
```

Why would you do this to yourself?


# [Pick a theme]{.fg-lblue}<br/> [and stick with it]{.fg-orange}








