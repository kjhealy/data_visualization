---
title: "Data Visualization - 4. Show the Right Numbers"
format: kjhslides-revealjs
engine: knitr
filters:
  - invert-h1
  - line-highlight
  - include-code-files
author:
  - name: Kieran Healy
    affiliation: "Code Horizons"
date: last-modified
editor_options: 
  chunk_output_type: console
---


```{r}
#| label: "note"
#| include: FALSE
## NB: By default the  template will create a new subdirectory with its files inside.
```


```{r}
#| label: "packages"
#| include: FALSE
library(flipbookr)
library(here)
library(tidyverse)
library(kjhslides)
```


```{r}
#| label: "setup"
#| include: FALSE
## Configure the slides

kjh_register_tenso()    # Default fonts. Comment out if you don't have Tenso and Berkeley fonts.
kjh_set_knitr_opts()    
kjh_set_slide_theme()   # ggplot theme to go with slides. Set tenso = FALSE if necessary.





# Safe
```


# Show the [Right Numbers]{.fg-yellow}


## Load the packages we need

```{r }
#| label: "04-show-the-right-numbers-1"
library(tidyverse)      # Your friend and mine
library(gapminder)      # Gapminder data
library(here)           # Portable file paths
library(socviz)         # Handy socviz functions
```





# [`ggplot`]{.fg-lblue} implements a [grammar]{.fg-green} of graphics


## A grammar of graphics 

The grammar is a set of rules for how to [produce graphics from data]{.fg-blue}, by _[mapping]{.fg-green}_ data to or _[representing]{.fg-green}_ it by geometric [objects]{.fg-orange} (like points and lines) that have aesthetic [attributes]{.fg-orange} (like position, color, size, and shape), together with further rules for transforming data if needed, for adjusting scales and their guides, and for projecting results onto some coordinate system.


## {background-image="img/04_chomsky.png" background-size="cover"}


[**Like other rules of syntax, the grammar**<br />**limits what you can validly say**<br/>**but it doesn't automatically make**<br/>**what you say**<br />**sensible or meaningful**]{.fg-offwhite}



# Grouped data and the [`group`]{.fg-yellow} aesthetic

---

`r chunq_reveal("reveal-groupline",  lcolw="50", rcolw="50", title = "Try to make a lineplot")`

```{r}
#| label: "reveal-groupline"
#| include: FALSE
#| output-location: column

p <- ggplot(data = gapminder, 
            mapping = aes(x = year,
                       y = gdpPercap)) + 
  geom_line()

p
```

`r chunq_reveal("reveal-groupline2",  lcolw="50", rcolw="50", title = "Try to make a lineplot")`

```{r}
#| label: "reveal-groupline2"
#| include: FALSE
#| output-location: column
p <- ggplot(data = gapminder, 
            mapping = aes(x = year,
                       y = gdpPercap)) + 
  geom_line(mapping = aes(group = country)) 

p

```

`r chunq_reveal("reveal-facet",  lcolw="50", rcolw="50", title = "Facet the plot")`

```{r}
#| label: "reveal-facet"
#| include: FALSE
#| output-location: column
gapminder |> 
  ggplot(mapping = 
           aes(x = year,
           y = gdpPercap)) + 
  geom_line(mapping = aes(group = country)) + 
  facet_wrap(~ continent)
```


# Faceting is very powerful 


## Faceting 

- A facet is not a geom; it's a way of arranging repeated geoms by some additional variable
- Facets use R's "formula" syntax: [`facet_wrap(~ continent)`]{.fg-green} 
- Read the [**`~`**]{.fg-pink} as "on" or "by"

## Faceting 

- You can also use this syntax: [`facet_wrap(vars(continent))`]{.fg-green}
- This is newer, and consistent with other ways of referring to variables within tidyverse functions.


## Facets in action

```{r }
#| label: "04-show-the-right-numbers-2"
p <- ggplot(data = gapminder,
            mapping = aes(x = year,
                          y = gdpPercap))

p_out <- p + geom_line(color="gray70", 
              mapping=aes(group = country)) +
    geom_smooth(linewidth = 1.1,
                method = "loess",
                se = FALSE) +
    scale_y_log10(labels=scales::label_dollar()) +
    facet_wrap(~ continent, ncol = 5) +#<<
    labs(x = "Year",
         y = "log GDP per capita",
         title = "GDP per capita on Five Continents",
         caption = "Data: Gapminder")    
```

---


```{r}
#| label: "04-show-the-right-numbers-3"
#| echo: FALSE
#| fig.width: 18
#| fig.height: 5
p_out
```

::: aside
  A more polished faceted plot.
:::

# [One-variable]{.fg-lblue} [summaries]{.fg-yellow}

## The [`midwest`]{.fg-pink} dataset

- County-level census data for Midwestern U.S. Counties

```{r }
#| label: "04-show-the-right-numbers-4"
midwest
```

## [`stat_`]{.fg-green} functions behind the scenes

```{r}
#| label: "codefig-histogram"
#| message: TRUE
#| fig.width: 4.8
#| fig.height: 4.5
#| output-location: column

p <- ggplot(data = midwest, 
            mapping = aes(x = area))

p + geom_histogram()

```

Here the default [`stat_`]{.fg-green} function for this geom has to make a choice. It is letting us know we might want to override it.



## [`stat_`]{.fg-green} functions behind the scenes

```{r}
#| label: "codefig-histogram2"
#| message: TRUE
#| fig.width: 4.8
#| fig.height: 4.5
#| output-location: column

p <- ggplot(data = midwest, 
            mapping = aes(x = area))

p + geom_histogram(bins = 10)

```

- We can choose _either_ the number of bins _or_ the `binwidth`

## Compare two distributions

```{r}
#| label: "codefig-subset"
#| message: FALSE
#| fig.width: 4.8
#| fig.height: 4.5
#| output-location: column
#| 

## Two state codes
oh_wi <- c("OH", "WI")

midwest |> 
  filter(state %in% oh_wi) |> 
  ggplot(mapping = aes(x = percollege, 
                       fill = state)) + 
  geom_histogram()

```

- Here we do the whole thing in a [pipeline]{.fg-red} using the pipe and the `dplyr` verb [`filter()`]{.fg-green} to subset rows of the data by some condition.
- Experiment with changing the `position` argument to `"dodge"`.



## [geom_density()]{.fg-green}

```{r}
#| label: "codefig-density1"
#| message: FALSE
#| fig.width: 4.8
#| fig.height: 4.5
#| output-location: column

p <- ggplot(data = midwest, 
            mapping = aes(x = area))

p + geom_density()
```


## [geom_density()]{.fg-green}

```{r}
#| label: "codefig-density2"
#| message: FALSE
#| fig.width: 4.8
#| fig.height: 4.5
#| output-location: column

p <- ggplot(data = midwest,
            mapping = aes(x = area, 
                          fill = state, 
                          color = state))
p + geom_density(alpha = 0.3)
```


## [geom_density()]{.fg-green}

```{r}
#| label: "codefig-density3"
#| message: FALSE
#| fig.width: 4.8
#| fig.height: 4.5
#| output-location: column

midwest |>
  filter(state %in% oh_wi) |> 
  ggplot(mapping = aes(x = area,
                       fill = state, 
                       color = state)) + 
  geom_density(mapping = aes(y = after_stat(ndensity)), #<<
               alpha = 0.4)

```

- `ndensity` here is _computed_. Histogram and density geoms have default statistics, but you can ask them to do more. The `after_stat` functions can do this work for us.


```{r}
#| label: "04-show-the-right-numbers-11"
#| echo: FALSE
#| message: FALSE
## Generate some fake data

## Keep track of labels for as_labeller() functions in plots later.
grp_names <- c(`a` = "Group A",
               `b` = "Group B",
               `c` = "Group C",
               `pop_a` = "Group A",
               `pop_b` = "Group B",  
               `pop_c` = "Group C",  
               `pop_total` = "Total",                 
               `A` = "Group A", 
               `B` = "Group B", 
               `C` = "Group C")


# make it reproducible
set.seed(1243098)

# 3,000 "counties"
N <- 3e3

## "County" populations
grp_ns <- c("size_a", "size_b", "size_c")
a_range <- c(1e0:5e1)
b_range <- c(3e0:7e3)
c_range <- c(4e1:5e2)

df_ns <- tibble(
  a_n = sample(a_range, N, replace=TRUE),
  b_n = sample(a_range, N, replace=TRUE),
  c_n = sample(a_range, N, replace=TRUE),
)


rtnorm <- function(n, mean = 0, sd = 1, min = 0, max = 1) {
  bounds <- pnorm(c(min, max), mean, sd)
  u <- runif(n, bounds[1], bounds[2])
  qnorm(u, mean, sd)
}

# Means and standard deviations of groups
mus <- c(0.3, 0.5, 0.6)
sds <- c(0.1, 0.15, 0.2)
grp <- c("pop_a", "pop_b", "pop_c")

# Make the parameters into a list
params <- list(mean = mus, 
                sd = sds)

# Feed the parameters to rnorm() to make three columns, 
# switch to rowwise() to take the weighted average of 
## the columns for each row.
df <- pmap_dfc(params, rtnorm, n = N) |>  
  rename_with(~ grp) |> 
  rowid_to_column("unit") |> 
  bind_cols(df_ns) |> 
  rowwise() |>  
  mutate(pop_total = weighted.mean(c(pop_a, pop_b, pop_c), 
                                   w = c(a_n, b_n, c_n))) |>  
  ungroup() 

```

# Compare [subgroups]{.fg-yellow} to a reference distribution

## Some made-up data

- Consider 3,000 observations of some unit (e.g., a county) with summary measures for each group, and the mean weighted by subgroup population within unit.

```{r }
#| label: "04-show-the-right-numbers-12"
df
```


`r chunq_reveal("reveal-pivlongex",  lcolw="35", rcolw="65", title = "Get the data into long format!")`

```{r}
#| label: "reveal-pivlongex"
#| include: FALSE
 df |> 
  select(unit:pop_c, pop_total) |> 
  pivot_longer(cols = pop_a:pop_total) 
```


## First effort: Hard to read


```{r}
#| label: "codefig-refdist1"
#| message: FALSE
#| fig.width: 4.8
#| fig.height: 4.5
#| output-location: column
 df |> 
  select(unit:pop_c, pop_total) |> 
  pivot_longer(cols = pop_a:pop_total)  |> 
  ggplot() + 
  geom_histogram(mapping = aes(x = value, 
                               y = after_stat(ncount), #<<
                          color = name, fill = name), 
            stat = "bin", bins = 20, 
            linewidth = 0.5, alpha = 0.7,
            position = "identity") + 
  labs(x = "Measure", y = "Scaled Count", color = "Group", 
       fill = "Group",
       title = "Comparing Subgroups: Histograms")
```

- Again, `after_stat(ncount)` is computed.

`r chunq_reveal("reveal-pivottrick1",  lcolw="45", rcolw="55", title = "A little pivot trick")`

```{r}
#| label: "reveal-pivottrick1"
#| include: FALSE
# Treat pop_a to pop_total as a single variable
df |>
  select(unit:pop_c, pop_total) |> 
  pivot_longer(cols = pop_a:pop_total)
```

`r chunq_reveal("reveal-pivottrick2",  lcolw="45", rcolw="55", title = "A little pivot trick")`

```{r}
#| label: "reveal-pivottrick2"
#| include: FALSE
# Just treat pop_a to pop_c as the single variable.
# Notice that pop_total just gets repeated.
 df |>
  select(unit, pop_a:pop_c, pop_total) |> 
  pivot_longer(cols = pop_a:pop_c)
```


## Now facet with that data

:::: {.columns}
::: {.column width="60%"}
```{r }
#| label: "04-show-the-right-numbers-14"
p_out <- df |>
  select(unit, pop_a:pop_c, pop_total) |> 
  pivot_longer(pop_a:pop_c) |>
  ggplot() + 
  geom_histogram(mapping = aes(x = pop_total, #<<
                               y = after_stat(ncount)), 
                bins = 20, alpha = 0.7,
                fill = "gray40", linewidth = 0.5) + 
  geom_histogram(mapping = aes(x = value, #<<
                               y = after_stat(ncount), 
                          color = name, fill = name), 
            stat = "bin", bins = 20, linewidth = 0.5,
            alpha = 0.5) + 
  guides(color = "none", fill = "none") + #<<
  labs(x = "Measure", y = "Scaled Count", 
       title = "Comparing Subgroups: Histograms", 
       subtitle = "Reference distribution shown in gray") + 
  facet_wrap(~ name, nrow = 1) #<<
```
:::

::: {.column width="40%" .right}
- Remember, we can layer geoms one on top of the other. Here we call [`geom_histogram()`]{.fg-green} twice. What happens if you comment one or other of them out?
- The call to [`guides()`]{.fg-green} turns off the legend for the color and fill, because we don't need them. 

:::
::::


## Now facet with that data

```{r}
#| label: "04-show-the-right-numbers-15"
#| echo: FALSE
#| fig.width: 15
#| fig.height: 5
p_out
```



# [Avoid counting up,]{.fg-yellow}<br />[when necessary]{.fg-lblue}

## Sometimes no counting is needed

```{r}
#| label: "04-show-the-right-numbers-16"
#| echo: FALSE
ggplot2::theme_set(ggplot2::theme_classic())
```

```{r }
#| label: "04-show-the-right-numbers-17"
titanic
```

- Here we just have a summary table and want to plot a few numbers directly in a bar chart.

## [`geom_bar()`]{.fg-green} wants to count up


```{r}
#| label: "codefig-titanic1"
#| message: FALSE
#| fig.width: 2.8
#| fig.height: 2.5
#| output-location: column

p <- ggplot(data = titanic,
            mapping = aes(x = fate, 
                          y = percent, 
                          fill = sex))
p + geom_bar(stat = "identity") #<<
```

By default [`geom_bar()`]{.fg-green} tries to count up data by category. (Really it's the [`stat_count()`]{.fg-green} function that does this behind the scenes.) By saying `stat="identity"` we explicitly tell it not to do that. This also allows us to use a `y` mapping. Normally this would be the result of the counting up.


## [`geom_bar()`]{.fg-green} stacks by default

```{r}
#| label: "codefig-titanic2"
#| message: FALSE
#| fig.width: 4.8
#| fig.height: 4.5
#| output-location: column
p <- ggplot(data = titanic,
            mapping = aes(x = fate, 
                          y = percent, 
                          fill = sex))
p + geom_bar(stat = "identity", 
             position = "dodge") #<<
```

- Position arguments adjust whether the things drawn are placed on top of one another (`"stack"`), side-by-side (`"dodge"`), or taken as-is (`"identity"`).
  

## A quick [`theme()`]{.fg-green} adjustment

```{r}
#| label: "codefig-titanic3"
#| message: FALSE
#| fig.width: 4.8
#| fig.height: 4.5
#| output-location: column
p <- ggplot(data = titanic,
            mapping = aes(x = fate, 
                          y = percent, 
                          fill = sex))
p + geom_bar(stat = "identity", 
             position = "dodge") +
  theme(legend.position = "top") #<<
```


The [`theme()`]{.fg-green} function controls the styling of parts of the plot that don't belong to its "grammatical" structure. That is, that are not contributing to directly representing data.


## For convenience, use [`geom_col()`]{.fg-green}

```{r}
#| label: "codefig-geomcol"
#| message: FALSE
#| fig.width: 4.8
#| fig.height: 4.5
#| output-location: column
p <- ggplot(data = titanic,
            mapping = aes(x = fate, 
                          y = percent, 
                          fill = sex))
p + geom_col(position = "dodge") + #<<
  theme(legend.position = "top")
```

- [`geom_col()`]{.fg-green} assumes `stat = "identity"` by default. It's for when you want to directly plot a table of values, rather than create a bar chart by summing over one varible categorized by another.


## Using [`geom_col()`]{.fg-green} for thresholds

```{r}
#| label: "04-show-the-right-numbers-22"
#| echo: FALSE
#| message: FALSE
kjhslides::kjh_set_slide_theme()
```

:::: {.columns}
::: {.column width="45%"}
```{r }
#| label: "04-show-the-right-numbers-23"
oecd_sum
```

:::

::: {.column width="55%" .right}
- Data comparing U.S. average life expectancy to the rest of the OECD average. 
- [`diff`]{.fg-orange} is difference in years with respect to the U.S. 
- [`hi_lo`]{.fg-orange} is a flag saying whether the OECD is above or below the U.S.

:::
::::


## Using [geom_col()]{.fg-green} for thresholds

```{r }
#| label: "04-show-the-right-numbers-24"
p <- ggplot(data = oecd_sum, 
            mapping = aes(x = year, 
                          y = diff, 
                          fill = hi_lo))

p_out <- p + geom_col() + 
  geom_hline(yintercept = 0, linewidth = 1.2) + #<<
  guides(fill = "none") + 
  labs(x = NULL, #<<
       y = "Difference in Years", 
       title = "The U.S. Life Expectancy Gap", 
       subtitle = "Difference between U.S. and 
       OECD average life expectancies, 1960-2015",
       caption = "Data: OECD.")
```

- [`geom_hline()`]{.fg-green} doesn't take any data argument. It just draws a horizontal line with a given y-intercept.
- `x = NULL` means "Don't label the x-axis (not even with the default value, the variable name).

## Using [`geom_col()`]{.fg-green} for thresholds

```{r}
#| label: "04-show-the-right-numbers-25"
#| echo: FALSE
#| fig.width: 15
#| fig.height: 4
p_out
```


